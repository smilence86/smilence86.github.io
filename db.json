{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/ac2100/bad_blocks.png","path":"images/ac2100/bad_blocks.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/breed.png","path":"images/ac2100/breed.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/op_overview.png","path":"images/ac2100/op_overview.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/logs.png","path":"images/ac2100/logs.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/shell.png","path":"images/ac2100/shell.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/startup.png","path":"images/ac2100/startup.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/k2p.png","path":"images/ac2100/k2p.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/origin_system.png","path":"images/ac2100/origin_system.png","modified":0,"renderable":0},{"_id":"source/images/non-censor/dns.png","path":"images/non-censor/dns.png","modified":0,"renderable":0},{"_id":"source/images/non-censor/route.png","path":"images/non-censor/route.png","modified":0,"renderable":0},{"_id":"source/images/ac2100/ac2100.png","path":"images/ac2100/ac2100.png","modified":0,"renderable":0},{"_id":"source/images/wireguard/ddns.png","path":"images/wireguard/ddns.png","modified":0,"renderable":0},{"_id":"source/images/wireguard/frp.png","path":"images/wireguard/frp.png","modified":0,"renderable":0},{"_id":"source/images/wireguard/port.png","path":"images/wireguard/port.png","modified":0,"renderable":0},{"_id":"source/images/wireguard/wg.png","path":"images/wireguard/wg.png","modified":0,"renderable":0},{"_id":"source/images/wireguard/wg_android.jpeg","path":"images/wireguard/wg_android.jpeg","modified":0,"renderable":0},{"_id":"source/images/wireguard/wg_windows.jpg","path":"images/wireguard/wg_windows.jpg","modified":0,"renderable":0},{"_id":"source/images/wireguard/openwrt.jpeg","path":"images/wireguard/openwrt.jpeg","modified":0,"renderable":0},{"_id":"source/images/aio/win10_cpu.png","path":"images/aio/win10_cpu.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_memory.png","path":"images/aio/win10_memory.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_cpuz.png","path":"images/aio/win10_cpuz.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_cpuz_vega_radeon.png","path":"images/aio/win10_cpuz_vega_radeon.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_radeon.png","path":"images/aio/win10_radeon.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_standby_power.png","path":"images/aio/win10_standby_power.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_standby_power.jpg","path":"images/aio/pve_standby_power.jpg","modified":0,"renderable":0},{"_id":"source/images/aio/CrystalDiskInfo.png","path":"images/aio/CrystalDiskInfo.png","modified":0,"renderable":0},{"_id":"source/images/aio/CrystalDiskMark.png","path":"images/aio/CrystalDiskMark.png","modified":0,"renderable":0},{"_id":"source/images/aio/ludashi_bench.png","path":"images/aio/ludashi_bench.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_standby_power.jpg","path":"images/aio/pve_win10_standby_power.jpg","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_ide_bench.png","path":"images/aio/pve_win10_ide_bench.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_IDE.png","path":"images/aio/pve_IDE.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_scsi.png","path":"images/aio/pve_scsi.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_scsi_driver.png","path":"images/aio/pve_win10_scsi_driver.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_no_disk.png","path":"images/aio/pve_win10_no_disk.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_scsi_disk.png","path":"images/aio/pve_win10_scsi_disk.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_cpuz_bench.png","path":"images/aio/pve_win10_cpuz_bench.png","modified":0,"renderable":0},{"_id":"source/images/aio/win10_cpuz_bench.png","path":"images/aio/win10_cpuz_bench.png","modified":0,"renderable":0},{"_id":"source/images/aio/before_group.png","path":"images/aio/before_group.png","modified":0,"renderable":0},{"_id":"source/images/aio/after_group.png","path":"images/aio/after_group.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_mine_eth.png","path":"images/aio/pve_win10_mine_eth.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_openwrt.png","path":"images/aio/pve_openwrt.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_transfer_speed.jpg","path":"images/aio/pve_win10_transfer_speed.jpg","modified":0,"renderable":0},{"_id":"source/images/aio/pve_ubuntu_iperf3.png","path":"images/aio/pve_ubuntu_iperf3.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_debian_ubuntu_iperf3.png","path":"images/aio/pve_debian_ubuntu_iperf3.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_dashboard.png","path":"images/aio/pve_dashboard.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_ups_usb.png","path":"images/aio/pve_win10_ups_usb.png","modified":0,"renderable":0},{"_id":"source/images/aio/ups.png","path":"images/aio/ups.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_subscription.png","path":"images/aio/pve_subscription.png","modified":0,"renderable":0},{"_id":"source/images/aio/pve_win10_scsi_bench.png","path":"images/aio/pve_win10_scsi_bench.png","modified":0,"renderable":0},{"_id":"source/images/openwrt/pve_img.png","path":"images/openwrt/pve_img.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/upload_img.png","path":"images/openwrt/upload_img.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_disk.png","path":"images/openwrt/pve_openwrt_disk.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_bootOrder.png","path":"images/openwrt/pve_openwrt_bootOrder.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_pci.png","path":"images/openwrt/pve_openwrt_pci.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_bridge_eth.png","path":"images/openwrt/pve_bridge_eth.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_bridge_eth.png","path":"images/openwrt/pve_openwrt_bridge_eth.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_qemu_guest_agent.png","path":"images/openwrt/pve_openwrt_qemu_guest_agent.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_disk_increment.png","path":"images/openwrt/pve_openwrt_disk_increment.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_disk_info.png","path":"images/openwrt/pve_openwrt_disk_info.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_iperf3.png","path":"images/openwrt/pve_openwrt_iperf3.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_overview.png","path":"images/openwrt/pve_openwrt_overview.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_qemu_ga.png","path":"images/openwrt/pve_openwrt_qemu_ga.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_ip.png","path":"images/openwrt/pve_openwrt_ip.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_eth_full_duplex.png","path":"images/openwrt/pve_openwrt_eth_full_duplex.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_eths_full_duplex.png","path":"images/openwrt/pve_openwrt_eths_full_duplex.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_ddns.png","path":"images/openwrt/pve_openwrt_ddns.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/cloudflare_dns.png","path":"images/openwrt/cloudflare_dns.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_ddns_cf.png","path":"images/openwrt/pve_openwrt_ddns_cf.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_ddns_cf_detail.png","path":"images/openwrt/pve_openwrt_ddns_cf_detail.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_ddns_list.png","path":"images/openwrt/pve_openwrt_ddns_list.png","modified":1,"renderable":0},{"_id":"source/images/openwrt/pve_openwrt_forward.png","path":"images/openwrt/pve_openwrt_forward.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1645170688559},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1646407964520},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1645170688419},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1645170688423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1645170688423},{"_id":"source/_posts/about.md","hash":"cd7d1f3cd916799b45e26fc5da8fabbdec79043f","modified":1645172025712},{"_id":"source/CNAME","hash":"b0ba125d832bfe96886f77a35d20b31a1c21658e","modified":1645172295383},{"_id":"source/_posts/redmi_ac2100.md","hash":"3e5bd2797c5dac4bf47d663f2c867ec12afb7069","modified":1647756525824},{"_id":"source/images/bad_blocks.png","hash":"7ce8abfa7b0fcd9d21d0b5a65ddd5339c7a0c8bf","modified":1646409440792},{"_id":"source/images/ac2100/startup.png","hash":"8e298cdfd1b40ebcaec01272d409af68878248b3","modified":1646410575479},{"_id":"source/images/ac2100/breed.png","hash":"1afcf6ff0a813f0fcf099e8ba998602283a37e74","modified":1646409806999},{"_id":"source/images/ac2100/op_overview.png","hash":"16e33d8df250e3704328426461f3ffd4b5dd3900","modified":1646409908146},{"_id":"source/images/ac2100/logs.png","hash":"fb722aa89d074a13633140768c2da7d81df57895","modified":1646410067547},{"_id":"source/images/ac2100/bad_blocks.png","hash":"7ce8abfa7b0fcd9d21d0b5a65ddd5339c7a0c8bf","modified":1646409440792},{"_id":"source/images/ac2100/shell.png","hash":"e3863ed14a417db47d9091525fd92216cf573317","modified":1646410414029},{"_id":"source/_posts/non-censor.md","hash":"bc3d4e0285cf165e0eeaa1ff5bcad3784e0bff86","modified":1646414134961},{"_id":"source/images/ac2100/k2p.png","hash":"42e0e9a120a8589d34cf6ba8ee03c867c0736059","modified":1646410728103},{"_id":"source/images/ac2100/origin_system.png","hash":"901bfa6cde34810099b07efba89de832305003da","modified":1646411169469},{"_id":"source/images/non-censor/dns.png","hash":"7082817f2150401f7c3479ae23909aa2f173638b","modified":1646413390746},{"_id":"source/images/non-censor/route.png","hash":"766e12af78017edf10ef04a6b6d8afc2f50516cb","modified":1646413617110},{"_id":"source/images/ac2100/ac2100.png","hash":"ba5d940f5a2a0553b7f59c0168a0e3794e2668b1","modified":1647756156188},{"_id":"source/_posts/redmi_ac2100 copy.md","hash":"38209990fbec06a3511719237ffc3a3e812e0456","modified":1647846591322},{"_id":"source/images/wireguard/frp.png","hash":"86005fd61efb46c63c5a82a189ef43fe2278ac03","modified":1647845509734},{"_id":"source/images/wireguard/ddns.png","hash":"69b487dec739b0a858009b8de3360c265e4049a7","modified":1647851022055},{"_id":"source/_posts/wireguard.md","hash":"88c9b8e14bcea26d7616177935d3743522a66f1a","modified":1648726445981},{"_id":"source/images/wireguard/wg.png","hash":"e2090af2feaaa6ca6fae7e53aab423a838d71386","modified":1647847867781},{"_id":"source/images/wireguard/wg_windows.jpg","hash":"94b245d29c39ed4164e107ee7518ad8b228f8d1f","modified":1647849131526},{"_id":"source/images/wireguard/port.png","hash":"e84ac2a242d65ffbd1147aaef339df473e7ab717","modified":1647847347616},{"_id":"source/images/wireguard/wg_android.jpeg","hash":"748ecd1956faba1cc7d6401b952d5824ef8d305b","modified":1647849957980},{"_id":"source/images/wireguard/openwrt.jpeg","hash":"0d838163f393e723e60baaf2d0320f7977169d7b","modified":1647850273137},{"_id":"source/_posts/all_in_one.md","hash":"4b7189a4f78ce16cfbebf152ff83b30e2f77699c","modified":1648726971930},{"_id":"source/images/aio/CrystalDiskMark.png","hash":"c6e56ced5a6b653368b76bd742e48defbaf13868","modified":1648709318741},{"_id":"source/images/aio/pve_win10_mine_eth.png","hash":"d56f4c65f7c59de9a1d67d502fca2e6d8a5cc29d","modified":1648715256423},{"_id":"source/images/aio/pve_win10_transfer_speed.jpg","hash":"339179d1a0cd0e8c9f44f6d0a4adfb3e3aedb395","modified":1648716656001},{"_id":"source/images/aio/CrystalDiskInfo.png","hash":"eca9e95331f6c33dbb8651a8d34d5badd78599e2","modified":1648709201266},{"_id":"source/images/aio/after_group.png","hash":"244e25002ad67394817b8cc50c8e5cc150b9667f","modified":1648714299200},{"_id":"source/images/aio/before_group.png","hash":"6cbc08ed0ec606c50efaf87121c64d19d9335c3e","modified":1648714228269},{"_id":"source/images/aio/pve_IDE.png","hash":"b218e918c58a0b544bfc1017fc585ebf8a9cdeab","modified":1648710819677},{"_id":"source/images/aio/pve_scsi.png","hash":"dec27e3d4922c81c89cf8706233de3e104dac0d7","modified":1648710868702},{"_id":"source/images/aio/pve_virtIO.png","hash":"a73ab4c84fa3b52ef8868c8fd29af3d3e5db7ba5","modified":1648711030475},{"_id":"source/images/aio/pve_win10_cpuz_bench.png","hash":"12ef2e62310a9790772258788a9de4420452707b","modified":1648713813534},{"_id":"source/images/aio/pve_win10_no_disk.png","hash":"73d5dbae43288ef59e0f2d26cc3af5ee78026bc4","modified":1648711321490},{"_id":"source/images/aio/pve_win10_scsi_disk.png","hash":"d311fb543d00500d0e23b40e2e65fe4365e77b14","modified":1648711372125},{"_id":"source/images/aio/pve_win10_scsi_driver.png","hash":"d18c35bd305aca8d5eb0523ee6e3841e858af394","modified":1648711243718},{"_id":"source/images/aio/win10_cpu.png","hash":"9eaaaef830bdc6bd087a1ea2830e03f8bde585e9","modified":1648707751013},{"_id":"source/images/aio/win10_cpuz_bench.png","hash":"2ab83b031646ff73889bdfad5b73582eb28844bf","modified":1648707896922},{"_id":"source/images/aio/win10_cpuz_vega_radeon.png","hash":"acf4709b47cd890499276dd1b0cc881ba630940d","modified":1648707892997},{"_id":"source/images/aio/win10_memory.png","hash":"ac56f28f8929420b4eb3fb7957a7d0e469d5d5c6","modified":1648707871490},{"_id":"source/images/aio/win10_radeon.png","hash":"c6714f3465eda934cdc745a817bbaf0cc8819d92","modified":1648707878874},{"_id":"source/images/aio/pve_openwrt.png","hash":"a403351cc49afe388c20ac9121835a99ef3e71c7","modified":1648715561062},{"_id":"source/images/aio/pve_standby_power.jpg","hash":"b25decb433c24eecf91abab3f1a5c57bd66c911a","modified":1648710039625},{"_id":"source/images/aio/win10_cpuz.png","hash":"0149d724924159e62a3e2e47334b3d2a861bae8a","modified":1648707887009},{"_id":"source/images/aio/pve_win10_standby_power.jpg","hash":"449fc14ae46aee3307d026ce1db53d3eeed406b8","modified":1648710180937},{"_id":"source/images/aio/pve_win10_ide_bench.png","hash":"f7fa9a856108b5973bbeeb41d6f9b6d05f5d2d7a","modified":1648710318741},{"_id":"source/images/aio/ludashi_bench.png","hash":"2fa9b34db1a702b50245b57b470292d5bfc46b26","modified":1648709740045},{"_id":"source/images/aio/pve_dashboard.png","hash":"b9f65b90fda04519698e0610cb25a6fe466f5b30","modified":1648718238547},{"_id":"source/images/aio/pve_ubuntu_iperf3.png","hash":"071715f12ca69858b4e7bf151e9ca254cc4f24e5","modified":1648717453550},{"_id":"source/images/aio/pve_debian_ubuntu_iperf3.png","hash":"d6a634e319eecd96c40bdf55634df336cfa00dff","modified":1648717944968},{"_id":"source/images/aio/win10_standby_power.png","hash":"1c65bdee6e45f26301f0173665ec8fc8f4398d20","modified":1648708854954},{"_id":"source/images/aio/ups.png","hash":"2a9ccb5199ad0a3c8da78db066d3aa7c04eede48","modified":1648719893214},{"_id":"source/images/aio/pve_win10_ups_usb.png","hash":"84022c03e8fe3d456cd3e0934cdcbc73ad28d06e","modified":1648719765522},{"_id":"source/images/aio/pve_subscription.png","hash":"7c7eabeb1159c6e11d7d4a911ad482f56f51d681","modified":1648724618764},{"_id":"source/images/aio/pve_win10_scsi_bench.png","hash":"9b207efb8e0b879ef0a4e64516141ac14d5376b1","modified":1648725191247},{"_id":"source/_posts/openwrt.md","hash":"73b185c1786e40de28f5cf33adc6a94d10705dfa","modified":1648796851480},{"_id":"source/images/openwrt/img.png","hash":"4b77b6384a2273c8adf646dd330d6343e5e83d76","modified":1648779378481},{"_id":"source/images/openwrt/pve_openwrt_ddns.png","hash":"ee336777280a07eee696fe3e84ba1c5575dcadd2","modified":1648796786495},{"_id":"source/images/openwrt/pve_openwrt_eths_full_duplex.png","hash":"beee5bee8ebd25ae868f9c087edab6abc3141128","modified":1648786172388},{"_id":"source/images/openwrt/pve_openwrt_ip.png","hash":"aab0ae80f5e8db63ee59b4f9684d40296b5299a6","modified":1648785857094},{"_id":"source/images/openwrt/pve_openwrt_qemu_guest_agent.png","hash":"fa08123d5aed93a93676c7d125bfdbd00b94c322","modified":1648785765269},{"_id":"source/images/openwrt/pve_img.png","hash":"538234481ff6d2b0c92406de0a0281ed3009b94b","modified":1648779830291},{"_id":"source/images/openwrt/pve_openwrt_bootOrder.png","hash":"57d847f84c5e627da3d2befcde572bbaca475e57","modified":1648780974765},{"_id":"source/images/openwrt/upload_img.png","hash":"4b77b6384a2273c8adf646dd330d6343e5e83d76","modified":1648779378481},{"_id":"source/images/openwrt/pve_openwrt_disk.png","hash":"145423bf1570a89bfa2f384d87d85f420410bf22","modified":1648780634674},{"_id":"source/images/openwrt/pve_openwrt_overview.png","hash":"21429aaf6ad89f7f619a9d41e4e3df20570fdc07","modified":1648785231064},{"_id":"source/images/openwrt/pve_bridge_eth.png","hash":"f4db4f5acbc2b414f92d7687a7fcccd46fc519dd","modified":1648781881263},{"_id":"source/images/openwrt/pve_openwrt_bridge_eth.png","hash":"2f2dcc30eab5ae596359ced5e2b839c581b71a22","modified":1648782444776},{"_id":"source/images/openwrt/pve_openwrt_pci.png","hash":"138c403dd47730a6a9a16d5656fc25ab3305f735","modified":1648781661920},{"_id":"source/images/openwrt/pve_openwrt_disk_increment.png","hash":"8c30dd41865d3ff451cdaf942d501a2cdaf6d908","modified":1648783363829},{"_id":"source/images/openwrt/pve_openwrt_disk_info.png","hash":"de1c4828a28f54c3c8716ac3153bec524a99e9ec","modified":1648783889270},{"_id":"source/images/openwrt/pve_openwrt_eth_full_duplex.png","hash":"60a28ba9a6a7fa63c9ce583a65556b6b93fbc962","modified":1648786025004},{"_id":"source/images/openwrt/pve_openwrt_qemu_ga.png","hash":"bc7d1d18d2035dc7ec14787b52ad353313ad292d","modified":1648785548778},{"_id":"source/images/openwrt/pve_openwrt_iperf3.png","hash":"fcf999ab56d0089769694cb4663ccbb811853ec8","modified":1648784917776}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-02-18T07:51:28.559Z","updated":"2022-02-18T07:51:28.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs4tk2h0000z6dn01sv9xbj","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"红米ac2100刷openwrt","date":"2022-03-04T14:11:57.000Z","_content":"\n来自小黄鱼￥119\n\n![](../images/ac2100/ac2100.png)\n\\\n\\\n\n红米原系统：\n\n![](../images/ac2100/origin_system.png)\n\\\n\\\n检查是否坏块：http://i.lckiss.com/?p=6761\n\n![](../images/ac2100/bad_blocks.png)\n\n中奖，没有坏块！\n\\\n\\\n刷写breed：https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/\n\n![](../images/ac2100/breed.png)\n\\\n\\\n刷入openwrt，固件来源：https://www.right.com.cn/forum/thread-6529167-1-1.html\n\n![](../images/ac2100/op_overview.png)\n\\\n\\\n检查是否有坏块：\n\n![](../images/ac2100/logs.png)\n\n![](../images/ac2100/shell.png)\n\\\n\\\n\\\n如果wifi无法开机自启，在启动项中添加命令：\n\nifconfig ra0 up  \nifconfig rai0 up\n\n![](../images/ac2100/startup.png)\n\\\n\\\n\\\n意外的是，ac2100的cpu跟k2p相同，但跑分高不少，k2p只有4500：\n  \n![](../images/ac2100/k2p.png)\n\n","source":"_posts/redmi_ac2100.md","raw":"---\ntitle: 红米ac2100刷openwrt\ndate: 2022-03-04 22:11:57\ntags: redmi, ac2100, openwrt\n---\n\n来自小黄鱼￥119\n\n![](../images/ac2100/ac2100.png)\n\\\n\\\n\n红米原系统：\n\n![](../images/ac2100/origin_system.png)\n\\\n\\\n检查是否坏块：http://i.lckiss.com/?p=6761\n\n![](../images/ac2100/bad_blocks.png)\n\n中奖，没有坏块！\n\\\n\\\n刷写breed：https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/\n\n![](../images/ac2100/breed.png)\n\\\n\\\n刷入openwrt，固件来源：https://www.right.com.cn/forum/thread-6529167-1-1.html\n\n![](../images/ac2100/op_overview.png)\n\\\n\\\n检查是否有坏块：\n\n![](../images/ac2100/logs.png)\n\n![](../images/ac2100/shell.png)\n\\\n\\\n\\\n如果wifi无法开机自启，在启动项中添加命令：\n\nifconfig ra0 up  \nifconfig rai0 up\n\n![](../images/ac2100/startup.png)\n\\\n\\\n\\\n意外的是，ac2100的cpu跟k2p相同，但跑分高不少，k2p只有4500：\n  \n![](../images/ac2100/k2p.png)\n\n","slug":"redmi_ac2100","published":1,"updated":"2022-03-20T06:08:45.824Z","_id":"cl0clu9zs000052dn4xqh5il8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>来自小黄鱼￥119</p>\n<p><img src=\"/../images/ac2100/ac2100.png\"><br><br>\\</p>\n<p>红米原系统：</p>\n<p><img src=\"/../images/ac2100/origin_system.png\"><br><br><br>检查是否坏块：<a href=\"http://i.lckiss.com/?p=6761\">http://i.lckiss.com/?p=6761</a></p>\n<p><img src=\"/../images/ac2100/bad_blocks.png\"></p>\n<p>中奖，没有坏块！<br><br><br>刷写breed：<a href=\"https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/\">https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/</a></p>\n<p><img src=\"/../images/ac2100/breed.png\"><br><br><br>刷入openwrt，固件来源：<a href=\"https://www.right.com.cn/forum/thread-6529167-1-1.html\">https://www.right.com.cn/forum/thread-6529167-1-1.html</a></p>\n<p><img src=\"/../images/ac2100/op_overview.png\"><br><br><br>检查是否有坏块：</p>\n<p><img src=\"/../images/ac2100/logs.png\"></p>\n<p><img src=\"/../images/ac2100/shell.png\"><br><br><br><br>如果wifi无法开机自启，在启动项中添加命令：</p>\n<p>ifconfig ra0 up<br>ifconfig rai0 up</p>\n<p><img src=\"/../images/ac2100/startup.png\"><br><br><br><br>意外的是，ac2100的cpu跟k2p相同，但跑分高不少，k2p只有4500：</p>\n<p><img src=\"/../images/ac2100/k2p.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>来自小黄鱼￥119</p>\n<p><img src=\"/../images/ac2100/ac2100.png\"><br><br>\\</p>\n<p>红米原系统：</p>\n<p><img src=\"/../images/ac2100/origin_system.png\"><br><br><br>检查是否坏块：<a href=\"http://i.lckiss.com/?p=6761\">http://i.lckiss.com/?p=6761</a></p>\n<p><img src=\"/../images/ac2100/bad_blocks.png\"></p>\n<p>中奖，没有坏块！<br><br><br>刷写breed：<a href=\"https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/\">https://www.lotlab.org/2021/06/13/install-openwrt-on-redmi-ac2100/</a></p>\n<p><img src=\"/../images/ac2100/breed.png\"><br><br><br>刷入openwrt，固件来源：<a href=\"https://www.right.com.cn/forum/thread-6529167-1-1.html\">https://www.right.com.cn/forum/thread-6529167-1-1.html</a></p>\n<p><img src=\"/../images/ac2100/op_overview.png\"><br><br><br>检查是否有坏块：</p>\n<p><img src=\"/../images/ac2100/logs.png\"></p>\n<p><img src=\"/../images/ac2100/shell.png\"><br><br><br><br>如果wifi无法开机自启，在启动项中添加命令：</p>\n<p>ifconfig ra0 up<br>ifconfig rai0 up</p>\n<p><img src=\"/../images/ac2100/startup.png\"><br><br><br><br>意外的是，ac2100的cpu跟k2p相同，但跑分高不少，k2p只有4500：</p>\n<p><img src=\"/../images/ac2100/k2p.png\"></p>\n"},{"title":"免备案解析域名","date":"2022-02-18T08:11:57.000Z","_content":"\n2022年，大陆建站依然需要备案，隐私先不说，支持备案域名种数就不得不吐嘈，政策执行那么多年依然只有少得可怜的几种域名能通过备案，逼迫大家寻求邪门歪道曲线救国。\n\n大致思路：user browser < - > CF dns < - > CF worker < - > deno < - > vps in mainland\n\n首先想到用CF worker反代网站，但worker不支持直接解析ip:port，所以要再加一层代理，先用国外边缘计算服务反代一次获得第三方域名再用worker反代，2次套娃转发流量起到免备案效果，代价是访问略慢，好处是cdn隐藏你的vps ip避免攻击提升安全性。\n\n边缘计算服务以deno为例，免费，官网显示支持全球28个节点快速响应\n\n访问：[https://deno.com](https://deno.com)，注册帐号，创建项目，关联代码来自github，建议创建私有private仓库避免暴露vps ip，main分支只需创建一个文件proxy.ts：\n\n```\nimport { serve } from \"https://deno.land/std@0.114.0/http/server.ts\";\n\nasync function handler(req: Request): Promise<Response> {\n  // console.log(req.headers);\n  // console.log(req.method, req.url);\n  const url = req.url;\n  const path = url.substring(url.indexOf('.dev') + 4);\n  // 替换ip port\n  return await fetch(`http://vps_ip:port${path}`);\n}\n\nconsole.log(\"Listening on http://localhost:8000\");\nserve(handler);\n```\n\n项目部署好，获得一个deno提供的三方域名：xxx.deno.dev，此时可以用这个域名访问你的网站。\n\n接下来到cloudflare创建一个worker，内容：\n```\naddEventListener(\"fetch\", (event) => {\n  const request = event.request;\n  const { pathname } = new URL(request.url);\n  const url = new URL(`https://xxx.deno.dev${pathname}`);\n  return event.respondWith(fetch(url, request));\n});\n```\n\n设置dns，ip地址随意填192.0.2.1：\n\n![](../images/non-censor/dns.png)\n\\\n\\\n在worker中添加一个路由：\n\n![](../images/non-censor/route.png)\n\n这样，所有访问 https://blog.example.com 的流量都会经过worker处理，worker获取 https://xxx.deno.dev 的数据，deno获取vps ip数据，达到曲线救国的目的。\n","source":"_posts/non-censor.md","raw":"---\ntitle: 免备案解析域名\ndate: 2022-02-18 16:11:57\ntags: non-censor\n---\n\n2022年，大陆建站依然需要备案，隐私先不说，支持备案域名种数就不得不吐嘈，政策执行那么多年依然只有少得可怜的几种域名能通过备案，逼迫大家寻求邪门歪道曲线救国。\n\n大致思路：user browser < - > CF dns < - > CF worker < - > deno < - > vps in mainland\n\n首先想到用CF worker反代网站，但worker不支持直接解析ip:port，所以要再加一层代理，先用国外边缘计算服务反代一次获得第三方域名再用worker反代，2次套娃转发流量起到免备案效果，代价是访问略慢，好处是cdn隐藏你的vps ip避免攻击提升安全性。\n\n边缘计算服务以deno为例，免费，官网显示支持全球28个节点快速响应\n\n访问：[https://deno.com](https://deno.com)，注册帐号，创建项目，关联代码来自github，建议创建私有private仓库避免暴露vps ip，main分支只需创建一个文件proxy.ts：\n\n```\nimport { serve } from \"https://deno.land/std@0.114.0/http/server.ts\";\n\nasync function handler(req: Request): Promise<Response> {\n  // console.log(req.headers);\n  // console.log(req.method, req.url);\n  const url = req.url;\n  const path = url.substring(url.indexOf('.dev') + 4);\n  // 替换ip port\n  return await fetch(`http://vps_ip:port${path}`);\n}\n\nconsole.log(\"Listening on http://localhost:8000\");\nserve(handler);\n```\n\n项目部署好，获得一个deno提供的三方域名：xxx.deno.dev，此时可以用这个域名访问你的网站。\n\n接下来到cloudflare创建一个worker，内容：\n```\naddEventListener(\"fetch\", (event) => {\n  const request = event.request;\n  const { pathname } = new URL(request.url);\n  const url = new URL(`https://xxx.deno.dev${pathname}`);\n  return event.respondWith(fetch(url, request));\n});\n```\n\n设置dns，ip地址随意填192.0.2.1：\n\n![](../images/non-censor/dns.png)\n\\\n\\\n在worker中添加一个路由：\n\n![](../images/non-censor/route.png)\n\n这样，所有访问 https://blog.example.com 的流量都会经过worker处理，worker获取 https://xxx.deno.dev 的数据，deno获取vps ip数据，达到曲线救国的目的。\n","slug":"non-censor","published":1,"updated":"2022-03-04T17:15:34.961Z","_id":"cl0cmzpu400004ddn19b93lbt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>2022年，大陆建站依然需要备案，隐私先不说，支持备案域名种数就不得不吐嘈，政策执行那么多年依然只有少得可怜的几种域名能通过备案，逼迫大家寻求邪门歪道曲线救国。</p>\n<p>大致思路：user browser &lt; - &gt; CF dns &lt; - &gt; CF worker &lt; - &gt; deno &lt; - &gt; vps in mainland</p>\n<p>首先想到用CF worker反代网站，但worker不支持直接解析ip:port，所以要再加一层代理，先用国外边缘计算服务反代一次获得第三方域名再用worker反代，2次套娃转发流量起到免备案效果，代价是访问略慢，好处是cdn隐藏你的vps ip避免攻击提升安全性。</p>\n<p>边缘计算服务以deno为例，免费，官网显示支持全球28个节点快速响应</p>\n<p>访问：<a href=\"https://deno.com/\">https://deno.com</a>，注册帐号，创建项目，关联代码来自github，建议创建私有private仓库避免暴露vps ip，main分支只需创建一个文件proxy.ts：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; serve &#125; from &quot;https://deno.land/std@0.114.0/http/server.ts&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">async function handler(req: Request): Promise&lt;Response&gt; &#123;</span><br><span class=\"line\">  // console.log(req.headers);</span><br><span class=\"line\">  // console.log(req.method, req.url);</span><br><span class=\"line\">  const url = req.url;</span><br><span class=\"line\">  const path = url.substring(url.indexOf(&#x27;.dev&#x27;) + 4);</span><br><span class=\"line\">  // 替换ip port</span><br><span class=\"line\">  return await fetch(`http://vps_ip:port$&#123;path&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;Listening on http://localhost:8000&quot;);</span><br><span class=\"line\">serve(handler);</span><br></pre></td></tr></table></figure>\n\n<p>项目部署好，获得一个deno提供的三方域名：xxx.deno.dev，此时可以用这个域名访问你的网站。</p>\n<p>接下来到cloudflare创建一个worker，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(&quot;fetch&quot;, (event) =&gt; &#123;</span><br><span class=\"line\">  const request = event.request;</span><br><span class=\"line\">  const &#123; pathname &#125; = new URL(request.url);</span><br><span class=\"line\">  const url = new URL(`https://xxx.deno.dev$&#123;pathname&#125;`);</span><br><span class=\"line\">  return event.respondWith(fetch(url, request));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>设置dns，ip地址随意填192.0.2.1：</p>\n<p><img src=\"/../images/non-censor/dns.png\"><br><br><br>在worker中添加一个路由：</p>\n<p><img src=\"/../images/non-censor/route.png\"></p>\n<p>这样，所有访问 <a href=\"https://blog.example.com/\">https://blog.example.com</a> 的流量都会经过worker处理，worker获取 <a href=\"https://xxx.deno.dev/\">https://xxx.deno.dev</a> 的数据，deno获取vps ip数据，达到曲线救国的目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2022年，大陆建站依然需要备案，隐私先不说，支持备案域名种数就不得不吐嘈，政策执行那么多年依然只有少得可怜的几种域名能通过备案，逼迫大家寻求邪门歪道曲线救国。</p>\n<p>大致思路：user browser &lt; - &gt; CF dns &lt; - &gt; CF worker &lt; - &gt; deno &lt; - &gt; vps in mainland</p>\n<p>首先想到用CF worker反代网站，但worker不支持直接解析ip:port，所以要再加一层代理，先用国外边缘计算服务反代一次获得第三方域名再用worker反代，2次套娃转发流量起到免备案效果，代价是访问略慢，好处是cdn隐藏你的vps ip避免攻击提升安全性。</p>\n<p>边缘计算服务以deno为例，免费，官网显示支持全球28个节点快速响应</p>\n<p>访问：<a href=\"https://deno.com/\">https://deno.com</a>，注册帐号，创建项目，关联代码来自github，建议创建私有private仓库避免暴露vps ip，main分支只需创建一个文件proxy.ts：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; serve &#125; from &quot;https://deno.land/std@0.114.0/http/server.ts&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">async function handler(req: Request): Promise&lt;Response&gt; &#123;</span><br><span class=\"line\">  // console.log(req.headers);</span><br><span class=\"line\">  // console.log(req.method, req.url);</span><br><span class=\"line\">  const url = req.url;</span><br><span class=\"line\">  const path = url.substring(url.indexOf(&#x27;.dev&#x27;) + 4);</span><br><span class=\"line\">  // 替换ip port</span><br><span class=\"line\">  return await fetch(`http://vps_ip:port$&#123;path&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;Listening on http://localhost:8000&quot;);</span><br><span class=\"line\">serve(handler);</span><br></pre></td></tr></table></figure>\n\n<p>项目部署好，获得一个deno提供的三方域名：xxx.deno.dev，此时可以用这个域名访问你的网站。</p>\n<p>接下来到cloudflare创建一个worker，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(&quot;fetch&quot;, (event) =&gt; &#123;</span><br><span class=\"line\">  const request = event.request;</span><br><span class=\"line\">  const &#123; pathname &#125; = new URL(request.url);</span><br><span class=\"line\">  const url = new URL(`https://xxx.deno.dev$&#123;pathname&#125;`);</span><br><span class=\"line\">  return event.respondWith(fetch(url, request));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>设置dns，ip地址随意填192.0.2.1：</p>\n<p><img src=\"/../images/non-censor/dns.png\"><br><br><br>在worker中添加一个路由：</p>\n<p><img src=\"/../images/non-censor/route.png\"></p>\n<p>这样，所有访问 <a href=\"https://blog.example.com/\">https://blog.example.com</a> 的流量都会经过worker处理，worker获取 <a href=\"https://xxx.deno.dev/\">https://xxx.deno.dev</a> 的数据，deno获取vps ip数据，达到曲线救国的目的。</p>\n"},{"title":"wireguard远程回家","date":"2022-03-21T12:01:00.000Z","_content":"\n远程访问通常可以用向日葵、frp实现，但都有限制，向日葵远程桌面还行，特定系统特定端口无法实现，比如远程访问raspberry pi的ssh端口，frp可以做到但每个服务都要映射端口比较繁琐，我server端显示已经映射了47个服务，第一次配置工作量巨大。\n\n![](../images/wireguard/frp.png)\n\\\n\\\n换成vpn可以有效解决以上问题，在外远程访问家庭内网只需打开开关即可，使用ip、port跟内网一模一样，无需额外端口映射。\n\n对比发现wireguard效率高，速度快。前提是家庭网络有公网IP，如果是固定公网IP直接绑定域名就行，如果是动态公网IP则用ddns动态绑定，ddns可以跑在家庭局域网任何一台机器，比如openwrt：\n\n![](../images/wireguard/ddns.png)\n\\\n\\\n或者docker映射: home.example.com\n```\ndocker run -d --name=cf-ddns --restart=always -e API_KEY=*** -e ZONE=example.com -e SUBDOMAIN=home oznu/cloudflare-ddns\n```\n在内网任何一台机器启动wireguard:\n```\ndocker run -d \\\n--name=wireguard \\\n-e WG_HOST=home.example.com \\\n-e WG_PORT=54321 \\\n-e PASSWORD=yourPassword \\\n-e WG_DEFAULT_DNS=192.168.2.1 \\\n-e TZ=Asia/Shanghai \\\n-v /path/wg-easy:/etc/wireguard \\\n-p 54321:51820/udp \\\n-p 51821:51821/tcp \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_MODULE \\\n--sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\\n--sysctl=\"net.ipv4.ip_forward=1\" \\\n--restart unless-stopped \\\nweejewel/wg-easy\n```\n\\\n\\\n在openwrt -> 网络 -> 防火墙 -> 端口转发，假设wg运行在debian，其ip为192.168.2.103，让外部54321/udp转发到debian的54321/udp端口，：\n\n![](../images/wireguard/port.png)\n\\\n\\\n访问wg后台管理界面: [http://192.168.2.103:51821](http://192.168.2.103:51821)，密码登录进去添加一个客户端（peer）：\n![](../images/wireguard/wg.png)\n\\\n\\\n手机扫码即可连接：\n<img src=\"/images/wireguard/wg_android.jpeg\" width=\"500\" />\n\n\\\n\\\n电脑导入配置文件：\n\n![](../images/wireguard/wg_windows.jpg)\n\\\n\\\n至此就可以通过外网远程访问家里设备，比如路由器管理页：\n\n<img src=\"/../images/wireguard/openwrt.jpeg\" width=\"500\"/>\n\n如果家里挂了梯子，手机、电脑自动拥有科学上网能力。\n\\\n\\\n没有公网ip则要使用vps中转，配置略复杂，而且通讯速度依赖vps带宽没有直连快。\n","source":"_posts/wireguard.md","raw":"---\ntitle: wireguard远程回家\ndate: 2022-03-21 20:01:00\ntags: wireguard, openwrt\n---\n\n远程访问通常可以用向日葵、frp实现，但都有限制，向日葵远程桌面还行，特定系统特定端口无法实现，比如远程访问raspberry pi的ssh端口，frp可以做到但每个服务都要映射端口比较繁琐，我server端显示已经映射了47个服务，第一次配置工作量巨大。\n\n![](../images/wireguard/frp.png)\n\\\n\\\n换成vpn可以有效解决以上问题，在外远程访问家庭内网只需打开开关即可，使用ip、port跟内网一模一样，无需额外端口映射。\n\n对比发现wireguard效率高，速度快。前提是家庭网络有公网IP，如果是固定公网IP直接绑定域名就行，如果是动态公网IP则用ddns动态绑定，ddns可以跑在家庭局域网任何一台机器，比如openwrt：\n\n![](../images/wireguard/ddns.png)\n\\\n\\\n或者docker映射: home.example.com\n```\ndocker run -d --name=cf-ddns --restart=always -e API_KEY=*** -e ZONE=example.com -e SUBDOMAIN=home oznu/cloudflare-ddns\n```\n在内网任何一台机器启动wireguard:\n```\ndocker run -d \\\n--name=wireguard \\\n-e WG_HOST=home.example.com \\\n-e WG_PORT=54321 \\\n-e PASSWORD=yourPassword \\\n-e WG_DEFAULT_DNS=192.168.2.1 \\\n-e TZ=Asia/Shanghai \\\n-v /path/wg-easy:/etc/wireguard \\\n-p 54321:51820/udp \\\n-p 51821:51821/tcp \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_MODULE \\\n--sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\\n--sysctl=\"net.ipv4.ip_forward=1\" \\\n--restart unless-stopped \\\nweejewel/wg-easy\n```\n\\\n\\\n在openwrt -> 网络 -> 防火墙 -> 端口转发，假设wg运行在debian，其ip为192.168.2.103，让外部54321/udp转发到debian的54321/udp端口，：\n\n![](../images/wireguard/port.png)\n\\\n\\\n访问wg后台管理界面: [http://192.168.2.103:51821](http://192.168.2.103:51821)，密码登录进去添加一个客户端（peer）：\n![](../images/wireguard/wg.png)\n\\\n\\\n手机扫码即可连接：\n<img src=\"/images/wireguard/wg_android.jpeg\" width=\"500\" />\n\n\\\n\\\n电脑导入配置文件：\n\n![](../images/wireguard/wg_windows.jpg)\n\\\n\\\n至此就可以通过外网远程访问家里设备，比如路由器管理页：\n\n<img src=\"/../images/wireguard/openwrt.jpeg\" width=\"500\"/>\n\n如果家里挂了梯子，手机、电脑自动拥有科学上网能力。\n\\\n\\\n没有公网ip则要使用vps中转，配置略复杂，而且通讯速度依赖vps带宽没有直连快。\n","slug":"wireguard","published":1,"updated":"2022-03-31T11:34:05.981Z","_id":"cl10dhlbi0003vrdn8xh60g3m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>远程访问通常可以用向日葵、frp实现，但都有限制，向日葵远程桌面还行，特定系统特定端口无法实现，比如远程访问raspberry pi的ssh端口，frp可以做到但每个服务都要映射端口比较繁琐，我server端显示已经映射了47个服务，第一次配置工作量巨大。</p>\n<p><img src=\"/../images/wireguard/frp.png\"><br><br><br>换成vpn可以有效解决以上问题，在外远程访问家庭内网只需打开开关即可，使用ip、port跟内网一模一样，无需额外端口映射。</p>\n<p>对比发现wireguard效率高，速度快。前提是家庭网络有公网IP，如果是固定公网IP直接绑定域名就行，如果是动态公网IP则用ddns动态绑定，ddns可以跑在家庭局域网任何一台机器，比如openwrt：</p>\n<p><img src=\"/../images/wireguard/ddns.png\"><br><br><br>或者docker映射: home.example.com</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=cf-ddns --restart=always -e API_KEY=*** -e ZONE=example.com -e SUBDOMAIN=home oznu/cloudflare-ddns</span><br></pre></td></tr></table></figure>\n<p>在内网任何一台机器启动wireguard:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name=wireguard \\</span><br><span class=\"line\">-e WG_HOST=home.example.com \\</span><br><span class=\"line\">-e WG_PORT=54321 \\</span><br><span class=\"line\">-e PASSWORD=yourPassword \\</span><br><span class=\"line\">-e WG_DEFAULT_DNS=192.168.2.1 \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-v /path/wg-easy:/etc/wireguard \\</span><br><span class=\"line\">-p 54321:51820/udp \\</span><br><span class=\"line\">-p 51821:51821/tcp \\</span><br><span class=\"line\">--cap-add=NET_ADMIN \\</span><br><span class=\"line\">--cap-add=SYS_MODULE \\</span><br><span class=\"line\">--sysctl=&quot;net.ipv4.conf.all.src_valid_mark=1&quot; \\</span><br><span class=\"line\">--sysctl=&quot;net.ipv4.ip_forward=1&quot; \\</span><br><span class=\"line\">--restart unless-stopped \\</span><br><span class=\"line\">weejewel/wg-easy</span><br></pre></td></tr></table></figure>\n<p><br><br>在openwrt -&gt; 网络 -&gt; 防火墙 -&gt; 端口转发，假设wg运行在debian，其ip为192.168.2.103，让外部54321&#x2F;udp转发到debian的54321&#x2F;udp端口，：</p>\n<p><img src=\"/../images/wireguard/port.png\"><br><br><br>访问wg后台管理界面: <a href=\"http://192.168.2.103:51821/\">http://192.168.2.103:51821</a>，密码登录进去添加一个客户端（peer）：<br><img src=\"/../images/wireguard/wg.png\"><br><br><br>手机扫码即可连接：<br><img src=\"/images/wireguard/wg_android.jpeg\" width=\"500\" /></p>\n<p><br><br>电脑导入配置文件：</p>\n<p><img src=\"/../images/wireguard/wg_windows.jpg\"><br><br><br>至此就可以通过外网远程访问家里设备，比如路由器管理页：</p>\n<img src=\"/../images/wireguard/openwrt.jpeg\" width=\"500\"/>\n\n<p>如果家里挂了梯子，手机、电脑自动拥有科学上网能力。<br><br><br>没有公网ip则要使用vps中转，配置略复杂，而且通讯速度依赖vps带宽没有直连快。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>远程访问通常可以用向日葵、frp实现，但都有限制，向日葵远程桌面还行，特定系统特定端口无法实现，比如远程访问raspberry pi的ssh端口，frp可以做到但每个服务都要映射端口比较繁琐，我server端显示已经映射了47个服务，第一次配置工作量巨大。</p>\n<p><img src=\"/../images/wireguard/frp.png\"><br><br><br>换成vpn可以有效解决以上问题，在外远程访问家庭内网只需打开开关即可，使用ip、port跟内网一模一样，无需额外端口映射。</p>\n<p>对比发现wireguard效率高，速度快。前提是家庭网络有公网IP，如果是固定公网IP直接绑定域名就行，如果是动态公网IP则用ddns动态绑定，ddns可以跑在家庭局域网任何一台机器，比如openwrt：</p>\n<p><img src=\"/../images/wireguard/ddns.png\"><br><br><br>或者docker映射: home.example.com</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=cf-ddns --restart=always -e API_KEY=*** -e ZONE=example.com -e SUBDOMAIN=home oznu/cloudflare-ddns</span><br></pre></td></tr></table></figure>\n<p>在内网任何一台机器启动wireguard:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name=wireguard \\</span><br><span class=\"line\">-e WG_HOST=home.example.com \\</span><br><span class=\"line\">-e WG_PORT=54321 \\</span><br><span class=\"line\">-e PASSWORD=yourPassword \\</span><br><span class=\"line\">-e WG_DEFAULT_DNS=192.168.2.1 \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-v /path/wg-easy:/etc/wireguard \\</span><br><span class=\"line\">-p 54321:51820/udp \\</span><br><span class=\"line\">-p 51821:51821/tcp \\</span><br><span class=\"line\">--cap-add=NET_ADMIN \\</span><br><span class=\"line\">--cap-add=SYS_MODULE \\</span><br><span class=\"line\">--sysctl=&quot;net.ipv4.conf.all.src_valid_mark=1&quot; \\</span><br><span class=\"line\">--sysctl=&quot;net.ipv4.ip_forward=1&quot; \\</span><br><span class=\"line\">--restart unless-stopped \\</span><br><span class=\"line\">weejewel/wg-easy</span><br></pre></td></tr></table></figure>\n<p><br><br>在openwrt -&gt; 网络 -&gt; 防火墙 -&gt; 端口转发，假设wg运行在debian，其ip为192.168.2.103，让外部54321&#x2F;udp转发到debian的54321&#x2F;udp端口，：</p>\n<p><img src=\"/../images/wireguard/port.png\"><br><br><br>访问wg后台管理界面: <a href=\"http://192.168.2.103:51821/\">http://192.168.2.103:51821</a>，密码登录进去添加一个客户端（peer）：<br><img src=\"/../images/wireguard/wg.png\"><br><br><br>手机扫码即可连接：<br><img src=\"/images/wireguard/wg_android.jpeg\" width=\"500\" /></p>\n<p><br><br>电脑导入配置文件：</p>\n<p><img src=\"/../images/wireguard/wg_windows.jpg\"><br><br><br>至此就可以通过外网远程访问家里设备，比如路由器管理页：</p>\n<img src=\"/../images/wireguard/openwrt.jpeg\" width=\"500\"/>\n\n<p>如果家里挂了梯子，手机、电脑自动拥有科学上网能力。<br><br><br>没有公网ip则要使用vps中转，配置略复杂，而且通讯速度依赖vps带宽没有直连快。</p>\n"},{"title":"amd4700ge搭建all in one","date":"2022-03-31T13:25:00.000Z","_content":"\n家用AIO考虑24*7运行的电费成本需要低功耗cpu，找了半天选择amd4700ge，这u没有零售只有OEM直接淘宝。\n\n配置清单：\nCPU：AMD 4700ge 8核16线程 TDP 35瓦\n风扇：玄冰风6铜管\n主板: 微星MAG B550M MORTAR WIFI\n内存：2 * 16G\n固态：英睿达P5 1T\n供电：850瓦全模组\nUPS：SVC BX1450L\n硬盘：4 * 西数紫盘8T(WD80PURX)\n\n硬盘裸装win10，8核16线程，适合跑多任务:\n\n![](../images/aio/win10_cpu.png)\n\n内存：\n![](../images/aio/win10_memory.png)\n\namd vega radeon集成显卡：\n![](../images/aio/win10_radeon.png)\n\ncpuz:\n![](../images/aio/win10_cpuz.png)\n\ncpuz集成显卡:\n![](../images/aio/win10_cpuz_vega_radeon.png)\n\ncpu跑分：单线程533，多线程5300\n![](../images/aio/win10_cpuz_bench.png)\n\n待机功耗：\n![](../images/aio/win10_standby_power.png)\n\n英睿达P5健康度：\n![](../images/aio/CrystalDiskInfo.png)\n\n英睿达P5读写测速：\n![](../images/aio/CrystalDiskMark.png)\n\n内存8g，频率3000，鲁大师跑分：\n![](../images/aio/ludashi_bench.png)\n</br>\n</br>\n\n---\n\n</br>\n\n接下来进入bios开启amd虚拟化，u盘安装pve，开启硬件直通，在虚拟机里测性能\n\n![](../images/aio/pve_dashboard.png)\n\n在pve7以后可以直接在web界面关闭企业源，启用非生产环境源获得系统更新：\n\n![](../images/aio/pve_subscription.png)\n\n</br>\n\n## 安装大礼包：\napt update\napt upgrade -y\napt install curl ufw lm-sensors apt-transport-https ca-certificates htop net-tools ethtool iperf3 vim git fail2ban -y\n\nvim /etc/fail2ban/jail.conf, 把bantime改成60m\nfail2ban-client status sshd\n\n## 查看cpu当前工作频率：\nwatch -n 2 \"cat /proc/cpuinfo | grep MHz\"\n\n## 查看cpu工作模式：\napt install cpufrequtils\ncpufreq-info\n\n设为节能模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g powersave; done'\n\n设为按需模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g ondemand; done'\n\n设为性能模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g performance; done'\n\n## 查看温度：\napt install lm-sensors\nsensors\n\n\n## 安装深色主题：\nbash <(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) install\n\n## 安装pvetools扩展功能：\nhttps://github.com/ivanhao/pvetools\n\n\n## 安装ufw防火墙\napt install ufw\nufw status\nufw allow 22/tcp\nufw enable\nufw allow 8006/tcp\nufw allow 4000/tcp\niptables -L\n\n## iperf3测速\npve宿主机作为server: iperf3 -s -p 4000\npve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.150\n\n![](../images/aio/pve_ubuntu_iperf3.png)\n\n\npve待机功耗：\n![](../images/aio/pve_standby_power.jpg)\n\n跟裸装win10待机功耗一样，都是20瓦。\n\npve虚拟一台win10待机功耗：\n![](../images/aio/pve_win10_standby_power.jpg)\n\n多3瓦。\n\n\npve虚拟win10，cpu类型选host，分配所有线程跑分：\n![](../images/aio/pve_win10_cpuz_bench.png)\n\n分数很接近裸装win10，性能损失3%左右。\n\npve虚拟win10，磁盘为IDE测速：\n![](../images/aio/pve_IDE.png)\n![](../images/aio/pve_win10_ide_bench.png)\n\npve虚拟win10，磁盘为SCSI测速：\n![](../images/aio/pve_scsi.png)\n![](../images/aio/pve_win10_scsi_bench.png)\n\n显而易见，应该选择SCSI作为虚拟机磁盘格式。\n\n但选择SCSI安装win10不能识别磁盘，需要加载驱动：\n![](../images/aio/pve_win10_no_disk.png)\n![](../images/aio/pve_win10_scsi_driver.png)\n![](../images/aio/pve_win10_scsi_disk.png)\n\n\n解决直通分组问题：\n[https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU](https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU)\n\n[https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html](https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html)\n\n[https://post.smzdm.com/p/alpwlzvp/\n](https://post.smzdm.com/p/alpwlzvp/\n)\n\n分组前，尝试给win10直通2张显卡：\n![](../images/aio/before_group.png)\n\n由上图可见，安装2张显卡后3070跟主板2.5G网卡的分组都是9，把3070直通给win10整个pve宿主机都断网失控，这时就要对PCI设备分组\n\n分组后3070变成17，2.5G网卡变成20：\n![](../images/aio/after_group.png)\n\n甚至板载AX200无线网卡也分了新的组19，之后就可以进行正常直通。\n\n测试显卡挖矿，直通后性能没有损失，跟裸装一样：\n\n![](../images/aio/pve_win10_mine_eth.png)\n\npve虚拟openwrt，cpu类型选host，分配所有线程跑分：\n![](../images/aio/pve_openwrt.png)\n\n\npve虚拟debian作为server: iperf3 -s -p 4000\npve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.103\n\n![](../images/aio/pve_debian_ubuntu_iperf3.png)\n\npve虚拟2台win10，互拷文件：\n![](../images/aio/pve_win10_transfer_speed.jpg)\n\n## 意外断电\n把ups的usb直通给win10-miner：\n\n![](../images/aio/pve_win10_ups_usb.png)\n\n停电后立马关机减轻电源负担：\n\n![](../images/aio/ups.png)\n\\\n\\\nbash脚本自动关机，pve会先关掉所有vm再关宿主机，前提是每个vm都安装了qemu-guest-agent：\nmkdir -p /root/shutdown\ncd /root/shutdown\nvim shutdown.sh\n```\n#!/bin/sh\n\n# apt install curl -y\n\nip=\"192.168.2.x\"  # ip which will detecting\ntime=30             # interval time of detecting (seconds)\ntriedCount=12        # try count\nfailCount=0         # failed count\n\nchat_id=\"\"\ntelegramToken=\"\"\n\npath=\"/root/shutdown/\"\n\nwhile true\ndo\n    date=`date +%Y-%m-%d`\n    logfile=$path$date'.log'\n\n    hostname=hostname\n    echo \"Detected hostname: `${hostname}`\" >> $logfile\n\n    notification=\"curl -X POST --header 'Content-Type: application/json' --data-raw '{\\\"chat_id\\\":\\\"$chat_id\\\",\\\"text\\\":\\\"`$hostname` is shutting down.\\\"}' -m 10 https://api.telegram.org/bot$telegramToken/sendMessage\"\n    # eval $notification\n\n    now=`date +%Y-%m-%d\\ %H:%M:%S`\n    # if ping $ip -4 -c 2 | grep 'time=' > $path'temp.log'\n    if ping $ip -4 -c 2 | grep 'time=' >> $logfile\n    then\n        echo $now 'ping success' $failCount >> $logfile\n        failCount=0\n    else\n        failCount=`expr $failCount + 1`\n        echo $now 'ping failed' $failCount >> $logfile\n        if test $failCount -ge $triedCount\n        then\n            echo $now 'execute shutdown' >> $logfile\n            eval $notification\n            shutdown -h now\n        fi\n    fi\n    sleep $time\ndone\n```\n\n原理：pve每隔30秒ping一次192.168.2.x，累积达到12次（6分钟）则触发关机动作，关机前给自己telegram机器人发消息并记录日志，当然弱电箱光猫、路由器、交换机也有ups续命。\n\nvim /etc/rc.loacl\n```\n#!/bin/bash\n\ncd /root/shutdown/ && nohup ./shutdown.sh > /dev/null 2>&1 &\n\n#exit 0\n```\n\nchmod +x /etc/rc.loacl\nreboot\n\n\n","source":"_posts/all_in_one.md","raw":"---\ntitle: amd4700ge搭建all in one\ndate: 2022-03-31 21:25:00\ntags: amd4700ge,AIO,all in one,pve,proxmox\n---\n\n家用AIO考虑24*7运行的电费成本需要低功耗cpu，找了半天选择amd4700ge，这u没有零售只有OEM直接淘宝。\n\n配置清单：\nCPU：AMD 4700ge 8核16线程 TDP 35瓦\n风扇：玄冰风6铜管\n主板: 微星MAG B550M MORTAR WIFI\n内存：2 * 16G\n固态：英睿达P5 1T\n供电：850瓦全模组\nUPS：SVC BX1450L\n硬盘：4 * 西数紫盘8T(WD80PURX)\n\n硬盘裸装win10，8核16线程，适合跑多任务:\n\n![](../images/aio/win10_cpu.png)\n\n内存：\n![](../images/aio/win10_memory.png)\n\namd vega radeon集成显卡：\n![](../images/aio/win10_radeon.png)\n\ncpuz:\n![](../images/aio/win10_cpuz.png)\n\ncpuz集成显卡:\n![](../images/aio/win10_cpuz_vega_radeon.png)\n\ncpu跑分：单线程533，多线程5300\n![](../images/aio/win10_cpuz_bench.png)\n\n待机功耗：\n![](../images/aio/win10_standby_power.png)\n\n英睿达P5健康度：\n![](../images/aio/CrystalDiskInfo.png)\n\n英睿达P5读写测速：\n![](../images/aio/CrystalDiskMark.png)\n\n内存8g，频率3000，鲁大师跑分：\n![](../images/aio/ludashi_bench.png)\n</br>\n</br>\n\n---\n\n</br>\n\n接下来进入bios开启amd虚拟化，u盘安装pve，开启硬件直通，在虚拟机里测性能\n\n![](../images/aio/pve_dashboard.png)\n\n在pve7以后可以直接在web界面关闭企业源，启用非生产环境源获得系统更新：\n\n![](../images/aio/pve_subscription.png)\n\n</br>\n\n## 安装大礼包：\napt update\napt upgrade -y\napt install curl ufw lm-sensors apt-transport-https ca-certificates htop net-tools ethtool iperf3 vim git fail2ban -y\n\nvim /etc/fail2ban/jail.conf, 把bantime改成60m\nfail2ban-client status sshd\n\n## 查看cpu当前工作频率：\nwatch -n 2 \"cat /proc/cpuinfo | grep MHz\"\n\n## 查看cpu工作模式：\napt install cpufrequtils\ncpufreq-info\n\n设为节能模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g powersave; done'\n\n设为按需模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g ondemand; done'\n\n设为性能模式：\nbash -c 'for ((i=0;i<$(nproc);i++)); do cpufreq-set -c $i -g performance; done'\n\n## 查看温度：\napt install lm-sensors\nsensors\n\n\n## 安装深色主题：\nbash <(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) install\n\n## 安装pvetools扩展功能：\nhttps://github.com/ivanhao/pvetools\n\n\n## 安装ufw防火墙\napt install ufw\nufw status\nufw allow 22/tcp\nufw enable\nufw allow 8006/tcp\nufw allow 4000/tcp\niptables -L\n\n## iperf3测速\npve宿主机作为server: iperf3 -s -p 4000\npve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.150\n\n![](../images/aio/pve_ubuntu_iperf3.png)\n\n\npve待机功耗：\n![](../images/aio/pve_standby_power.jpg)\n\n跟裸装win10待机功耗一样，都是20瓦。\n\npve虚拟一台win10待机功耗：\n![](../images/aio/pve_win10_standby_power.jpg)\n\n多3瓦。\n\n\npve虚拟win10，cpu类型选host，分配所有线程跑分：\n![](../images/aio/pve_win10_cpuz_bench.png)\n\n分数很接近裸装win10，性能损失3%左右。\n\npve虚拟win10，磁盘为IDE测速：\n![](../images/aio/pve_IDE.png)\n![](../images/aio/pve_win10_ide_bench.png)\n\npve虚拟win10，磁盘为SCSI测速：\n![](../images/aio/pve_scsi.png)\n![](../images/aio/pve_win10_scsi_bench.png)\n\n显而易见，应该选择SCSI作为虚拟机磁盘格式。\n\n但选择SCSI安装win10不能识别磁盘，需要加载驱动：\n![](../images/aio/pve_win10_no_disk.png)\n![](../images/aio/pve_win10_scsi_driver.png)\n![](../images/aio/pve_win10_scsi_disk.png)\n\n\n解决直通分组问题：\n[https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU](https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU)\n\n[https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html](https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html)\n\n[https://post.smzdm.com/p/alpwlzvp/\n](https://post.smzdm.com/p/alpwlzvp/\n)\n\n分组前，尝试给win10直通2张显卡：\n![](../images/aio/before_group.png)\n\n由上图可见，安装2张显卡后3070跟主板2.5G网卡的分组都是9，把3070直通给win10整个pve宿主机都断网失控，这时就要对PCI设备分组\n\n分组后3070变成17，2.5G网卡变成20：\n![](../images/aio/after_group.png)\n\n甚至板载AX200无线网卡也分了新的组19，之后就可以进行正常直通。\n\n测试显卡挖矿，直通后性能没有损失，跟裸装一样：\n\n![](../images/aio/pve_win10_mine_eth.png)\n\npve虚拟openwrt，cpu类型选host，分配所有线程跑分：\n![](../images/aio/pve_openwrt.png)\n\n\npve虚拟debian作为server: iperf3 -s -p 4000\npve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.103\n\n![](../images/aio/pve_debian_ubuntu_iperf3.png)\n\npve虚拟2台win10，互拷文件：\n![](../images/aio/pve_win10_transfer_speed.jpg)\n\n## 意外断电\n把ups的usb直通给win10-miner：\n\n![](../images/aio/pve_win10_ups_usb.png)\n\n停电后立马关机减轻电源负担：\n\n![](../images/aio/ups.png)\n\\\n\\\nbash脚本自动关机，pve会先关掉所有vm再关宿主机，前提是每个vm都安装了qemu-guest-agent：\nmkdir -p /root/shutdown\ncd /root/shutdown\nvim shutdown.sh\n```\n#!/bin/sh\n\n# apt install curl -y\n\nip=\"192.168.2.x\"  # ip which will detecting\ntime=30             # interval time of detecting (seconds)\ntriedCount=12        # try count\nfailCount=0         # failed count\n\nchat_id=\"\"\ntelegramToken=\"\"\n\npath=\"/root/shutdown/\"\n\nwhile true\ndo\n    date=`date +%Y-%m-%d`\n    logfile=$path$date'.log'\n\n    hostname=hostname\n    echo \"Detected hostname: `${hostname}`\" >> $logfile\n\n    notification=\"curl -X POST --header 'Content-Type: application/json' --data-raw '{\\\"chat_id\\\":\\\"$chat_id\\\",\\\"text\\\":\\\"`$hostname` is shutting down.\\\"}' -m 10 https://api.telegram.org/bot$telegramToken/sendMessage\"\n    # eval $notification\n\n    now=`date +%Y-%m-%d\\ %H:%M:%S`\n    # if ping $ip -4 -c 2 | grep 'time=' > $path'temp.log'\n    if ping $ip -4 -c 2 | grep 'time=' >> $logfile\n    then\n        echo $now 'ping success' $failCount >> $logfile\n        failCount=0\n    else\n        failCount=`expr $failCount + 1`\n        echo $now 'ping failed' $failCount >> $logfile\n        if test $failCount -ge $triedCount\n        then\n            echo $now 'execute shutdown' >> $logfile\n            eval $notification\n            shutdown -h now\n        fi\n    fi\n    sleep $time\ndone\n```\n\n原理：pve每隔30秒ping一次192.168.2.x，累积达到12次（6分钟）则触发关机动作，关机前给自己telegram机器人发消息并记录日志，当然弱电箱光猫、路由器、交换机也有ups续命。\n\nvim /etc/rc.loacl\n```\n#!/bin/bash\n\ncd /root/shutdown/ && nohup ./shutdown.sh > /dev/null 2>&1 &\n\n#exit 0\n```\n\nchmod +x /etc/rc.loacl\nreboot\n\n\n","slug":"all_in_one","published":1,"updated":"2022-03-31T11:42:51.930Z","_id":"cl1elwebe00000rdnb900a70o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>家用AIO考虑24*7运行的电费成本需要低功耗cpu，找了半天选择amd4700ge，这u没有零售只有OEM直接淘宝。</p>\n<p>配置清单：<br>CPU：AMD 4700ge 8核16线程 TDP 35瓦<br>风扇：玄冰风6铜管<br>主板: 微星MAG B550M MORTAR WIFI<br>内存：2 * 16G<br>固态：英睿达P5 1T<br>供电：850瓦全模组<br>UPS：SVC BX1450L<br>硬盘：4 * 西数紫盘8T(WD80PURX)</p>\n<p>硬盘裸装win10，8核16线程，适合跑多任务:</p>\n<p><img src=\"/../images/aio/win10_cpu.png\"></p>\n<p>内存：<br><img src=\"/../images/aio/win10_memory.png\"></p>\n<p>amd vega radeon集成显卡：<br><img src=\"/../images/aio/win10_radeon.png\"></p>\n<p>cpuz:<br><img src=\"/../images/aio/win10_cpuz.png\"></p>\n<p>cpuz集成显卡:<br><img src=\"/../images/aio/win10_cpuz_vega_radeon.png\"></p>\n<p>cpu跑分：单线程533，多线程5300<br><img src=\"/../images/aio/win10_cpuz_bench.png\"></p>\n<p>待机功耗：<br><img src=\"/../images/aio/win10_standby_power.png\"></p>\n<p>英睿达P5健康度：<br><img src=\"/../images/aio/CrystalDiskInfo.png\"></p>\n<p>英睿达P5读写测速：<br><img src=\"/../images/aio/CrystalDiskMark.png\"></p>\n<p>内存8g，频率3000，鲁大师跑分：<br><img src=\"/../images/aio/ludashi_bench.png\"><br></br><br></br></p>\n<hr>\n</br>\n\n<p>接下来进入bios开启amd虚拟化，u盘安装pve，开启硬件直通，在虚拟机里测性能</p>\n<p><img src=\"/../images/aio/pve_dashboard.png\"></p>\n<p>在pve7以后可以直接在web界面关闭企业源，启用非生产环境源获得系统更新：</p>\n<p><img src=\"/../images/aio/pve_subscription.png\"></p>\n</br>\n\n<h2 id=\"安装大礼包：\"><a href=\"#安装大礼包：\" class=\"headerlink\" title=\"安装大礼包：\"></a>安装大礼包：</h2><p>apt update<br>apt upgrade -y<br>apt install curl ufw lm-sensors apt-transport-https ca-certificates htop net-tools ethtool iperf3 vim git fail2ban -y</p>\n<p>vim &#x2F;etc&#x2F;fail2ban&#x2F;jail.conf, 把bantime改成60m<br>fail2ban-client status sshd</p>\n<h2 id=\"查看cpu当前工作频率：\"><a href=\"#查看cpu当前工作频率：\" class=\"headerlink\" title=\"查看cpu当前工作频率：\"></a>查看cpu当前工作频率：</h2><p>watch -n 2 “cat &#x2F;proc&#x2F;cpuinfo | grep MHz”</p>\n<h2 id=\"查看cpu工作模式：\"><a href=\"#查看cpu工作模式：\" class=\"headerlink\" title=\"查看cpu工作模式：\"></a>查看cpu工作模式：</h2><p>apt install cpufrequtils<br>cpufreq-info</p>\n<p>设为节能模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g powersave; done’</p>\n<p>设为按需模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g ondemand; done’</p>\n<p>设为性能模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g performance; done’</p>\n<h2 id=\"查看温度：\"><a href=\"#查看温度：\" class=\"headerlink\" title=\"查看温度：\"></a>查看温度：</h2><p>apt install lm-sensors<br>sensors</p>\n<h2 id=\"安装深色主题：\"><a href=\"#安装深色主题：\" class=\"headerlink\" title=\"安装深色主题：\"></a>安装深色主题：</h2><p>bash &lt;(curl -s <a href=\"https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh\">https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh</a> ) install</p>\n<h2 id=\"安装pvetools扩展功能：\"><a href=\"#安装pvetools扩展功能：\" class=\"headerlink\" title=\"安装pvetools扩展功能：\"></a>安装pvetools扩展功能：</h2><p><a href=\"https://github.com/ivanhao/pvetools\">https://github.com/ivanhao/pvetools</a></p>\n<h2 id=\"安装ufw防火墙\"><a href=\"#安装ufw防火墙\" class=\"headerlink\" title=\"安装ufw防火墙\"></a>安装ufw防火墙</h2><p>apt install ufw<br>ufw status<br>ufw allow 22&#x2F;tcp<br>ufw enable<br>ufw allow 8006&#x2F;tcp<br>ufw allow 4000&#x2F;tcp<br>iptables -L</p>\n<h2 id=\"iperf3测速\"><a href=\"#iperf3测速\" class=\"headerlink\" title=\"iperf3测速\"></a>iperf3测速</h2><p>pve宿主机作为server: iperf3 -s -p 4000<br>pve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.150</p>\n<p><img src=\"/../images/aio/pve_ubuntu_iperf3.png\"></p>\n<p>pve待机功耗：<br><img src=\"/../images/aio/pve_standby_power.jpg\"></p>\n<p>跟裸装win10待机功耗一样，都是20瓦。</p>\n<p>pve虚拟一台win10待机功耗：<br><img src=\"/../images/aio/pve_win10_standby_power.jpg\"></p>\n<p>多3瓦。</p>\n<p>pve虚拟win10，cpu类型选host，分配所有线程跑分：<br><img src=\"/../images/aio/pve_win10_cpuz_bench.png\"></p>\n<p>分数很接近裸装win10，性能损失3%左右。</p>\n<p>pve虚拟win10，磁盘为IDE测速：<br><img src=\"/../images/aio/pve_IDE.png\"><br><img src=\"/../images/aio/pve_win10_ide_bench.png\"></p>\n<p>pve虚拟win10，磁盘为SCSI测速：<br><img src=\"/../images/aio/pve_scsi.png\"><br><img src=\"/../images/aio/pve_win10_scsi_bench.png\"></p>\n<p>显而易见，应该选择SCSI作为虚拟机磁盘格式。</p>\n<p>但选择SCSI安装win10不能识别磁盘，需要加载驱动：<br><img src=\"/../images/aio/pve_win10_no_disk.png\"><br><img src=\"/../images/aio/pve_win10_scsi_driver.png\"><br><img src=\"/../images/aio/pve_win10_scsi_disk.png\"></p>\n<p>解决直通分组问题：<br><a href=\"https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU\">https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU</a></p>\n<p><a href=\"https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html\">https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html</a></p>\n<p><a href=\"https://post.smzdm.com/p/alpwlzvp/\">https://post.smzdm.com/p/alpwlzvp/\n</a></p>\n<p>分组前，尝试给win10直通2张显卡：<br><img src=\"/../images/aio/before_group.png\"></p>\n<p>由上图可见，安装2张显卡后3070跟主板2.5G网卡的分组都是9，把3070直通给win10整个pve宿主机都断网失控，这时就要对PCI设备分组</p>\n<p>分组后3070变成17，2.5G网卡变成20：<br><img src=\"/../images/aio/after_group.png\"></p>\n<p>甚至板载AX200无线网卡也分了新的组19，之后就可以进行正常直通。</p>\n<p>测试显卡挖矿，直通后性能没有损失，跟裸装一样：</p>\n<p><img src=\"/../images/aio/pve_win10_mine_eth.png\"></p>\n<p>pve虚拟openwrt，cpu类型选host，分配所有线程跑分：<br><img src=\"/../images/aio/pve_openwrt.png\"></p>\n<p>pve虚拟debian作为server: iperf3 -s -p 4000<br>pve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.103</p>\n<p><img src=\"/../images/aio/pve_debian_ubuntu_iperf3.png\"></p>\n<p>pve虚拟2台win10，互拷文件：<br><img src=\"/../images/aio/pve_win10_transfer_speed.jpg\"></p>\n<h2 id=\"意外断电\"><a href=\"#意外断电\" class=\"headerlink\" title=\"意外断电\"></a>意外断电</h2><p>把ups的usb直通给win10-miner：</p>\n<p><img src=\"/../images/aio/pve_win10_ups_usb.png\"></p>\n<p>停电后立马关机减轻电源负担：</p>\n<p><img src=\"/../images/aio/ups.png\"><br><br><br>bash脚本自动关机，pve会先关掉所有vm再关宿主机，前提是每个vm都安装了qemu-guest-agent：<br>mkdir -p &#x2F;root&#x2F;shutdown<br>cd &#x2F;root&#x2F;shutdown<br>vim shutdown.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># apt install curl -y</span><br><span class=\"line\"></span><br><span class=\"line\">ip=&quot;192.168.2.x&quot;  # ip which will detecting</span><br><span class=\"line\">time=30             # interval time of detecting (seconds)</span><br><span class=\"line\">triedCount=12        # try count</span><br><span class=\"line\">failCount=0         # failed count</span><br><span class=\"line\"></span><br><span class=\"line\">chat_id=&quot;&quot;</span><br><span class=\"line\">telegramToken=&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">path=&quot;/root/shutdown/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    date=`date +%Y-%m-%d`</span><br><span class=\"line\">    logfile=$path$date&#x27;.log&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    hostname=hostname</span><br><span class=\"line\">    echo &quot;Detected hostname: `$&#123;hostname&#125;`&quot; &gt;&gt; $logfile</span><br><span class=\"line\"></span><br><span class=\"line\">    notification=&quot;curl -X POST --header &#x27;Content-Type: application/json&#x27; --data-raw &#x27;&#123;\\&quot;chat_id\\&quot;:\\&quot;$chat_id\\&quot;,\\&quot;text\\&quot;:\\&quot;`$hostname` is shutting down.\\&quot;&#125;&#x27; -m 10 https://api.telegram.org/bot$telegramToken/sendMessage&quot;</span><br><span class=\"line\">    # eval $notification</span><br><span class=\"line\"></span><br><span class=\"line\">    now=`date +%Y-%m-%d\\ %H:%M:%S`</span><br><span class=\"line\">    # if ping $ip -4 -c 2 | grep &#x27;time=&#x27; &gt; $path&#x27;temp.log&#x27;</span><br><span class=\"line\">    if ping $ip -4 -c 2 | grep &#x27;time=&#x27; &gt;&gt; $logfile</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo $now &#x27;ping success&#x27; $failCount &gt;&gt; $logfile</span><br><span class=\"line\">        failCount=0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        failCount=`expr $failCount + 1`</span><br><span class=\"line\">        echo $now &#x27;ping failed&#x27; $failCount &gt;&gt; $logfile</span><br><span class=\"line\">        if test $failCount -ge $triedCount</span><br><span class=\"line\">        then</span><br><span class=\"line\">            echo $now &#x27;execute shutdown&#x27; &gt;&gt; $logfile</span><br><span class=\"line\">            eval $notification</span><br><span class=\"line\">            shutdown -h now</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    sleep $time</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>原理：pve每隔30秒ping一次192.168.2.x，累积达到12次（6分钟）则触发关机动作，关机前给自己telegram机器人发消息并记录日志，当然弱电箱光猫、路由器、交换机也有ups续命。</p>\n<p>vim &#x2F;etc&#x2F;rc.loacl</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /root/shutdown/ &amp;&amp; nohup ./shutdown.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">#exit 0</span><br></pre></td></tr></table></figure>\n\n<p>chmod +x &#x2F;etc&#x2F;rc.loacl<br>reboot</p>\n","site":{"data":{}},"excerpt":"","more":"<p>家用AIO考虑24*7运行的电费成本需要低功耗cpu，找了半天选择amd4700ge，这u没有零售只有OEM直接淘宝。</p>\n<p>配置清单：<br>CPU：AMD 4700ge 8核16线程 TDP 35瓦<br>风扇：玄冰风6铜管<br>主板: 微星MAG B550M MORTAR WIFI<br>内存：2 * 16G<br>固态：英睿达P5 1T<br>供电：850瓦全模组<br>UPS：SVC BX1450L<br>硬盘：4 * 西数紫盘8T(WD80PURX)</p>\n<p>硬盘裸装win10，8核16线程，适合跑多任务:</p>\n<p><img src=\"/../images/aio/win10_cpu.png\"></p>\n<p>内存：<br><img src=\"/../images/aio/win10_memory.png\"></p>\n<p>amd vega radeon集成显卡：<br><img src=\"/../images/aio/win10_radeon.png\"></p>\n<p>cpuz:<br><img src=\"/../images/aio/win10_cpuz.png\"></p>\n<p>cpuz集成显卡:<br><img src=\"/../images/aio/win10_cpuz_vega_radeon.png\"></p>\n<p>cpu跑分：单线程533，多线程5300<br><img src=\"/../images/aio/win10_cpuz_bench.png\"></p>\n<p>待机功耗：<br><img src=\"/../images/aio/win10_standby_power.png\"></p>\n<p>英睿达P5健康度：<br><img src=\"/../images/aio/CrystalDiskInfo.png\"></p>\n<p>英睿达P5读写测速：<br><img src=\"/../images/aio/CrystalDiskMark.png\"></p>\n<p>内存8g，频率3000，鲁大师跑分：<br><img src=\"/../images/aio/ludashi_bench.png\"><br></br><br></br></p>\n<hr>\n</br>\n\n<p>接下来进入bios开启amd虚拟化，u盘安装pve，开启硬件直通，在虚拟机里测性能</p>\n<p><img src=\"/../images/aio/pve_dashboard.png\"></p>\n<p>在pve7以后可以直接在web界面关闭企业源，启用非生产环境源获得系统更新：</p>\n<p><img src=\"/../images/aio/pve_subscription.png\"></p>\n</br>\n\n<h2 id=\"安装大礼包：\"><a href=\"#安装大礼包：\" class=\"headerlink\" title=\"安装大礼包：\"></a>安装大礼包：</h2><p>apt update<br>apt upgrade -y<br>apt install curl ufw lm-sensors apt-transport-https ca-certificates htop net-tools ethtool iperf3 vim git fail2ban -y</p>\n<p>vim &#x2F;etc&#x2F;fail2ban&#x2F;jail.conf, 把bantime改成60m<br>fail2ban-client status sshd</p>\n<h2 id=\"查看cpu当前工作频率：\"><a href=\"#查看cpu当前工作频率：\" class=\"headerlink\" title=\"查看cpu当前工作频率：\"></a>查看cpu当前工作频率：</h2><p>watch -n 2 “cat &#x2F;proc&#x2F;cpuinfo | grep MHz”</p>\n<h2 id=\"查看cpu工作模式：\"><a href=\"#查看cpu工作模式：\" class=\"headerlink\" title=\"查看cpu工作模式：\"></a>查看cpu工作模式：</h2><p>apt install cpufrequtils<br>cpufreq-info</p>\n<p>设为节能模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g powersave; done’</p>\n<p>设为按需模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g ondemand; done’</p>\n<p>设为性能模式：<br>bash -c ‘for ((i&#x3D;0;i&lt;$(nproc);i++)); do cpufreq-set -c $i -g performance; done’</p>\n<h2 id=\"查看温度：\"><a href=\"#查看温度：\" class=\"headerlink\" title=\"查看温度：\"></a>查看温度：</h2><p>apt install lm-sensors<br>sensors</p>\n<h2 id=\"安装深色主题：\"><a href=\"#安装深色主题：\" class=\"headerlink\" title=\"安装深色主题：\"></a>安装深色主题：</h2><p>bash &lt;(curl -s <a href=\"https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh\">https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh</a> ) install</p>\n<h2 id=\"安装pvetools扩展功能：\"><a href=\"#安装pvetools扩展功能：\" class=\"headerlink\" title=\"安装pvetools扩展功能：\"></a>安装pvetools扩展功能：</h2><p><a href=\"https://github.com/ivanhao/pvetools\">https://github.com/ivanhao/pvetools</a></p>\n<h2 id=\"安装ufw防火墙\"><a href=\"#安装ufw防火墙\" class=\"headerlink\" title=\"安装ufw防火墙\"></a>安装ufw防火墙</h2><p>apt install ufw<br>ufw status<br>ufw allow 22&#x2F;tcp<br>ufw enable<br>ufw allow 8006&#x2F;tcp<br>ufw allow 4000&#x2F;tcp<br>iptables -L</p>\n<h2 id=\"iperf3测速\"><a href=\"#iperf3测速\" class=\"headerlink\" title=\"iperf3测速\"></a>iperf3测速</h2><p>pve宿主机作为server: iperf3 -s -p 4000<br>pve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.150</p>\n<p><img src=\"/../images/aio/pve_ubuntu_iperf3.png\"></p>\n<p>pve待机功耗：<br><img src=\"/../images/aio/pve_standby_power.jpg\"></p>\n<p>跟裸装win10待机功耗一样，都是20瓦。</p>\n<p>pve虚拟一台win10待机功耗：<br><img src=\"/../images/aio/pve_win10_standby_power.jpg\"></p>\n<p>多3瓦。</p>\n<p>pve虚拟win10，cpu类型选host，分配所有线程跑分：<br><img src=\"/../images/aio/pve_win10_cpuz_bench.png\"></p>\n<p>分数很接近裸装win10，性能损失3%左右。</p>\n<p>pve虚拟win10，磁盘为IDE测速：<br><img src=\"/../images/aio/pve_IDE.png\"><br><img src=\"/../images/aio/pve_win10_ide_bench.png\"></p>\n<p>pve虚拟win10，磁盘为SCSI测速：<br><img src=\"/../images/aio/pve_scsi.png\"><br><img src=\"/../images/aio/pve_win10_scsi_bench.png\"></p>\n<p>显而易见，应该选择SCSI作为虚拟机磁盘格式。</p>\n<p>但选择SCSI安装win10不能识别磁盘，需要加载驱动：<br><img src=\"/../images/aio/pve_win10_no_disk.png\"><br><img src=\"/../images/aio/pve_win10_scsi_driver.png\"><br><img src=\"/../images/aio/pve_win10_scsi_disk.png\"></p>\n<p>解决直通分组问题：<br><a href=\"https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU\">https://pve.proxmox.com/wiki/Pci_passthrough#AMD_CPU</a></p>\n<p><a href=\"https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html\">https://mechanical-consciousness.com/2020/03/20/kvm-gpu-passthrough.html</a></p>\n<p><a href=\"https://post.smzdm.com/p/alpwlzvp/\">https://post.smzdm.com/p/alpwlzvp/\n</a></p>\n<p>分组前，尝试给win10直通2张显卡：<br><img src=\"/../images/aio/before_group.png\"></p>\n<p>由上图可见，安装2张显卡后3070跟主板2.5G网卡的分组都是9，把3070直通给win10整个pve宿主机都断网失控，这时就要对PCI设备分组</p>\n<p>分组后3070变成17，2.5G网卡变成20：<br><img src=\"/../images/aio/after_group.png\"></p>\n<p>甚至板载AX200无线网卡也分了新的组19，之后就可以进行正常直通。</p>\n<p>测试显卡挖矿，直通后性能没有损失，跟裸装一样：</p>\n<p><img src=\"/../images/aio/pve_win10_mine_eth.png\"></p>\n<p>pve虚拟openwrt，cpu类型选host，分配所有线程跑分：<br><img src=\"/../images/aio/pve_openwrt.png\"></p>\n<p>pve虚拟debian作为server: iperf3 -s -p 4000<br>pve虚拟ubuntu作为client: iperf3 -p 4000 -c 192.168.2.103</p>\n<p><img src=\"/../images/aio/pve_debian_ubuntu_iperf3.png\"></p>\n<p>pve虚拟2台win10，互拷文件：<br><img src=\"/../images/aio/pve_win10_transfer_speed.jpg\"></p>\n<h2 id=\"意外断电\"><a href=\"#意外断电\" class=\"headerlink\" title=\"意外断电\"></a>意外断电</h2><p>把ups的usb直通给win10-miner：</p>\n<p><img src=\"/../images/aio/pve_win10_ups_usb.png\"></p>\n<p>停电后立马关机减轻电源负担：</p>\n<p><img src=\"/../images/aio/ups.png\"><br><br><br>bash脚本自动关机，pve会先关掉所有vm再关宿主机，前提是每个vm都安装了qemu-guest-agent：<br>mkdir -p &#x2F;root&#x2F;shutdown<br>cd &#x2F;root&#x2F;shutdown<br>vim shutdown.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># apt install curl -y</span><br><span class=\"line\"></span><br><span class=\"line\">ip=&quot;192.168.2.x&quot;  # ip which will detecting</span><br><span class=\"line\">time=30             # interval time of detecting (seconds)</span><br><span class=\"line\">triedCount=12        # try count</span><br><span class=\"line\">failCount=0         # failed count</span><br><span class=\"line\"></span><br><span class=\"line\">chat_id=&quot;&quot;</span><br><span class=\"line\">telegramToken=&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">path=&quot;/root/shutdown/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    date=`date +%Y-%m-%d`</span><br><span class=\"line\">    logfile=$path$date&#x27;.log&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    hostname=hostname</span><br><span class=\"line\">    echo &quot;Detected hostname: `$&#123;hostname&#125;`&quot; &gt;&gt; $logfile</span><br><span class=\"line\"></span><br><span class=\"line\">    notification=&quot;curl -X POST --header &#x27;Content-Type: application/json&#x27; --data-raw &#x27;&#123;\\&quot;chat_id\\&quot;:\\&quot;$chat_id\\&quot;,\\&quot;text\\&quot;:\\&quot;`$hostname` is shutting down.\\&quot;&#125;&#x27; -m 10 https://api.telegram.org/bot$telegramToken/sendMessage&quot;</span><br><span class=\"line\">    # eval $notification</span><br><span class=\"line\"></span><br><span class=\"line\">    now=`date +%Y-%m-%d\\ %H:%M:%S`</span><br><span class=\"line\">    # if ping $ip -4 -c 2 | grep &#x27;time=&#x27; &gt; $path&#x27;temp.log&#x27;</span><br><span class=\"line\">    if ping $ip -4 -c 2 | grep &#x27;time=&#x27; &gt;&gt; $logfile</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo $now &#x27;ping success&#x27; $failCount &gt;&gt; $logfile</span><br><span class=\"line\">        failCount=0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        failCount=`expr $failCount + 1`</span><br><span class=\"line\">        echo $now &#x27;ping failed&#x27; $failCount &gt;&gt; $logfile</span><br><span class=\"line\">        if test $failCount -ge $triedCount</span><br><span class=\"line\">        then</span><br><span class=\"line\">            echo $now &#x27;execute shutdown&#x27; &gt;&gt; $logfile</span><br><span class=\"line\">            eval $notification</span><br><span class=\"line\">            shutdown -h now</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    sleep $time</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>原理：pve每隔30秒ping一次192.168.2.x，累积达到12次（6分钟）则触发关机动作，关机前给自己telegram机器人发消息并记录日志，当然弱电箱光猫、路由器、交换机也有ups续命。</p>\n<p>vim &#x2F;etc&#x2F;rc.loacl</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /root/shutdown/ &amp;&amp; nohup ./shutdown.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">#exit 0</span><br></pre></td></tr></table></figure>\n\n<p>chmod +x &#x2F;etc&#x2F;rc.loacl<br>reboot</p>\n"},{"title":"pve安装openwrt","date":"2022-04-01T11:26:00.000Z","_content":"\n# 一、上传镜像\n\n如果是压缩包img.gz格式要先解压成img上传\n\n![](../images/openwrt/upload_img.png)\n\npve版本7上传完成会显示文件存放路径: /var/lib/vz/template/iso\n\n![](../images/openwrt/pve_img.png)\n\npve版本6双击下方操作日志也会显示。\n\n\n# 二、创建vm\n\n一路下一步，过程省略。\n\n可以选择不使用ios镜像。\n\n完成后把默认磁盘删了。\n\n\n# 三、生成磁盘\n\nssh登录pve宿主机\n进入镜像存放目录: cd /var/lib/vz/template/iso\n创建磁盘: qm importdisk 100 /var/lib/vz/template/iso/openwrt-2022-03-27-x86-64-generic-squashfs-combined.img local-lvm\n\n\n# 四、加载磁盘\n\n双击未使用磁盘，添加：\n\n![](../images/openwrt/pve_openwrt_disk.png)\n\n扩容5G：\n\n![](../images/openwrt/pve_openwrt_disk_increment.png)\n\n# 五、添加网卡\n\n如果cpu支持vt-d硬件直通，则在“硬件添加pci”设备\n\n![](../images/openwrt/pve_openwrt_pci.png)\n\n如果cpu不支持vt-d硬件直通，则只能使用桥接网卡，先到pve节点网络下创建桥接网卡，备注为WAN口：\n\n![](../images/openwrt/pve_bridge_eth.png)\n\n回到openwrt硬件，添加网络设备，选择WAN：\n\n![](../images/openwrt/pve_openwrt_bridge_eth.png)\n\n\n# 六、修改配置\n\n开机自启（start at boot）改为Yes\n\n启动顺序（boot order）改成附加的磁盘：\n\n![](../images/openwrt/pve_openwrt_bootOrder.png)\n\n启用qemu guest agent，让pve宿主机能够与vm通讯：\n\n![](../images/openwrt/pve_openwrt_qemu_guest_agent.png)\n\n\n# 七、启动openwrt\n\n在pve web界面进入控制台ssh，按回车看到输入光标\n\nvim /etc/config/network\n把lan口静态ip改成192.168.2.1\n\n重启生效: /etc/init.d/network restart\n\n浏览器登录openwrt\n\n![](../images/openwrt/pve_openwrt_overview.png)\n\n用磁盘管理（diskman）把扩容的5G分区格式化成ext4，挂载给/opt目录，docker会使用opt作为overlay空间，不会消耗根目录容量。\n\nssh登录查看磁盘用量，df -Th：\n\n![](../images/openwrt/pve_openwrt_disk_info.png)\n\n\n# 八、cpu跑分\n\nssh执行: cd /etc && ./coremark.sh\n\n有的镜像是/sbin/cpumark，执行: cpumark\n\n# 九、网卡测速\n\nopkg install iperf3\nserver: iperf3 -s -p 4000\nclient: iperf3 -p 4000 -c 192.168.2.1\n\n![](../images/openwrt/pve_openwrt_iperf3.png)\n\n因为不是直通，n3160性能偏弱跑不满千兆，7、800也够用。\n\n\n# 十、把ash改成bash\nopkg update && opkg install bash\n编辑 /etc/passwd 文件\n修改第一行（第一行就是 root 用户）中的 /bin/ash，改成 /bin/bash\n保存重启路由器生效\n\n查看 /etc/shells 文件可以看到当前系统中有哪些可用的 shell 解释器\n/bin/ash\n/bin/bash\n/bin/rbash\n\n安装vim：opkg install vim\n\n利用bash快速找到历史命令，创建文件：vim ~/.inputrc，粘贴：\n\"\\e[A\": history-search-backward\n\"\\e[B\": history-search-forward\nset show-all-if-ambiguous on\nset completion-ignore-case on\n\n设置快捷键，创建文件：vim ~/.bashrc，粘贴内容：\nHISTSIZE=-1\nHISTFILESIZE=-1\n\nalias ll='ls -alhFtr'\nalias la='ls -A'\nalias l='ls -CF'\n\n执行命令生效：source ~/.bashrc\n\n# 十一、远程记录日志\n[https://www.betaflare.com/3730.html](https://www.betaflare.com/3730.html)\n\n# 十二、增大session过期时间\n\nvim /etc/config/luci\n\noption sessiontime '36000'\n\n\n# 十三、安装qemu guest agent\n\nopkg install qemu-ga\n\n![](../images/openwrt/pve_openwrt_qemu_ga.png)\n\npve显示openwrt ip：\n\n![](../images/openwrt/pve_openwrt_ip.png)\n\n\n# 十四、修改“半双工”\n\npve虚拟的openwrt网卡实际为全双工，显示为半双工且没有速度，可通过命令修改\n\n临时生效: ethtool -s eth0 speed 1000 duplex full\n\n永久生效: vim /etc/init.d/network\n\n![](../images/openwrt/pve_openwrt_eth_full_duplex.png)\n\n![](../images/openwrt/pve_openwrt_eths_full_duplex.png)\n\n\n# 十五、ddns公网访问\n\n家宽有公网ipv4，映射域名，配上证书，防火墙添加端口转发就可以公网访问。\n\n测试发现80、443端口不通，应该是运营商封了，退而求其次使用非标8443端口。\n\n首先配置域名，我用的cloudflare，在dns添加一条A记录，ip随意比如1.1.1.1：\n\n<img src=\"/../images/openwrt/cloudflare_dns.png\"/>\n\nopenwrt配置ddns：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns.png\" width=\"200\"/>\n\n添加ddns服务：\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf.png\"/>\n\n注意“查询主机名”跟“域名”格式不一样，前一个是“.”，后一个是“@”：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf_detail.png\"/>\n\n回到ddns列表界面，点击“重新加载”就会修改cf域名解析，本机ping一下是否成功。\n\n# 十六、配置域名ssl证书\n\n通常web服务有多个，最好找台linux当网关转发流量，以debian为例，安装nginx、acme.sh颁发证书并自动续期。\n\n获取nginx基础配置：\ncd ~/projects/ && mkdir nginx && mkdir nginx/conf.d && mkdir nginx/conf.d/certs\ndocker run --rm -d --name nginx nginx\ndocker cp nginx:/etc/nginx/nginx.conf ~/projects/nginx/nginx.conf\ndocker stop nginx\n\n启动nginx: \ndocker run -d --restart=always --name nginx -v /home/www/projects/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v /home/www/projects/nginx/conf.d:/etc/nginx/conf.d:ro --network=host nginx\n\n安装acme.sh:\ncurl https://get.acme.sh | sh -s email=yourName@gmail.com\n\nexit退出terminal重新登录使acme.sh命令生效\n\n导出环境变量，acme.sh执行时依赖这些变量：\nexport CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n\n颁发泛域名证书（Issue cert）:\n\n\tacme.sh --issue -d '*.example.com' --dns dns_cf --dnssleep 120 --debug 2 --server letsencrypt\n\n\n安装证书（Install cert）:\n\n\tacme.sh --install-cert -d '*.example.com' --key-file /home/www/projects/nginx/conf.d/certs/*.example.com.privkey.pem --fullchain-file /home/www/projects/nginx/conf.d/certs/*.example.com.fullchain.pem --reloadcmd \"docker exec -it nginx nginx -s reload\" --debug 2\n\n新建配置文件，vim /home/www/projects/nginx/conf.d/openwrt.conf\n```\nserver{\n\tlisten 80;\n\tserver_name op.example.com;\n\n\tclient_max_body_size 200M;\n\t#access_log  /data/logs/nginx_json/access.log json;\n\n\treturn 301 https://$host$request_uri;\n}\n\nserver{\n\tlisten 443 ssl;\n\tserver_name op.example.com;\n\n\tgzip on;\n\tgzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 3;\n    gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n\tclient_max_body_size 200M;\n\t#access_log  /data/logs/nginx_json/access.log json;\n\n\tssl_certificate  /etc/nginx/conf.d/certs/*.example.com.fullchain.pem;\n    ssl_certificate_key /etc/nginx/conf.d/certs/*.example.com.privkey.pem;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n\n    # Prevent crawling\n    if ($http_user_agent ~* \"360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot\"){\n        return 403;\n    }\n\n    location / {\n\t\tproxy_read_timeout 60m;\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Forwarded-Proto https;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Connection \"upgrade\";\n\t\tproxy_redirect off;\n\t\tproxy_pass http://192.168.2.1:80;\n\t}\n\n\terror_page 500 502 503 504 /50x.html;\n\t#location = /50x.html {\n\t#\troot /data/www/error/;\n\t#}\n\n}\n```\n\n查看nginx容器状态: docker ps -a\n\n查看nginx容器日志: docker logs -f --tail 500 nginx\n\n有错的话根据日志排查。\n\n\n# 十七、防火墙 > 端口转发\n\n假设内网debian网关ip为192.168.2.103，则将外网8443/tcp端口转发到debian的443/tcp：\n\n<img src=\"/../images/openwrt/pve_openwrt_forward.png\"/>\n\n\n之后便可以通过 https://openwrt.example.com:8443 访问家里openwrt，其他服务同理：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns_list.png\"/>\n\n\n\n\n","source":"_posts/openwrt.md","raw":"---\ntitle: pve安装openwrt\ndate: 2022-04-01 19:26:00\ntags: pve,proxmox,openwrt,ddns,acme,ssl\n---\n\n# 一、上传镜像\n\n如果是压缩包img.gz格式要先解压成img上传\n\n![](../images/openwrt/upload_img.png)\n\npve版本7上传完成会显示文件存放路径: /var/lib/vz/template/iso\n\n![](../images/openwrt/pve_img.png)\n\npve版本6双击下方操作日志也会显示。\n\n\n# 二、创建vm\n\n一路下一步，过程省略。\n\n可以选择不使用ios镜像。\n\n完成后把默认磁盘删了。\n\n\n# 三、生成磁盘\n\nssh登录pve宿主机\n进入镜像存放目录: cd /var/lib/vz/template/iso\n创建磁盘: qm importdisk 100 /var/lib/vz/template/iso/openwrt-2022-03-27-x86-64-generic-squashfs-combined.img local-lvm\n\n\n# 四、加载磁盘\n\n双击未使用磁盘，添加：\n\n![](../images/openwrt/pve_openwrt_disk.png)\n\n扩容5G：\n\n![](../images/openwrt/pve_openwrt_disk_increment.png)\n\n# 五、添加网卡\n\n如果cpu支持vt-d硬件直通，则在“硬件添加pci”设备\n\n![](../images/openwrt/pve_openwrt_pci.png)\n\n如果cpu不支持vt-d硬件直通，则只能使用桥接网卡，先到pve节点网络下创建桥接网卡，备注为WAN口：\n\n![](../images/openwrt/pve_bridge_eth.png)\n\n回到openwrt硬件，添加网络设备，选择WAN：\n\n![](../images/openwrt/pve_openwrt_bridge_eth.png)\n\n\n# 六、修改配置\n\n开机自启（start at boot）改为Yes\n\n启动顺序（boot order）改成附加的磁盘：\n\n![](../images/openwrt/pve_openwrt_bootOrder.png)\n\n启用qemu guest agent，让pve宿主机能够与vm通讯：\n\n![](../images/openwrt/pve_openwrt_qemu_guest_agent.png)\n\n\n# 七、启动openwrt\n\n在pve web界面进入控制台ssh，按回车看到输入光标\n\nvim /etc/config/network\n把lan口静态ip改成192.168.2.1\n\n重启生效: /etc/init.d/network restart\n\n浏览器登录openwrt\n\n![](../images/openwrt/pve_openwrt_overview.png)\n\n用磁盘管理（diskman）把扩容的5G分区格式化成ext4，挂载给/opt目录，docker会使用opt作为overlay空间，不会消耗根目录容量。\n\nssh登录查看磁盘用量，df -Th：\n\n![](../images/openwrt/pve_openwrt_disk_info.png)\n\n\n# 八、cpu跑分\n\nssh执行: cd /etc && ./coremark.sh\n\n有的镜像是/sbin/cpumark，执行: cpumark\n\n# 九、网卡测速\n\nopkg install iperf3\nserver: iperf3 -s -p 4000\nclient: iperf3 -p 4000 -c 192.168.2.1\n\n![](../images/openwrt/pve_openwrt_iperf3.png)\n\n因为不是直通，n3160性能偏弱跑不满千兆，7、800也够用。\n\n\n# 十、把ash改成bash\nopkg update && opkg install bash\n编辑 /etc/passwd 文件\n修改第一行（第一行就是 root 用户）中的 /bin/ash，改成 /bin/bash\n保存重启路由器生效\n\n查看 /etc/shells 文件可以看到当前系统中有哪些可用的 shell 解释器\n/bin/ash\n/bin/bash\n/bin/rbash\n\n安装vim：opkg install vim\n\n利用bash快速找到历史命令，创建文件：vim ~/.inputrc，粘贴：\n\"\\e[A\": history-search-backward\n\"\\e[B\": history-search-forward\nset show-all-if-ambiguous on\nset completion-ignore-case on\n\n设置快捷键，创建文件：vim ~/.bashrc，粘贴内容：\nHISTSIZE=-1\nHISTFILESIZE=-1\n\nalias ll='ls -alhFtr'\nalias la='ls -A'\nalias l='ls -CF'\n\n执行命令生效：source ~/.bashrc\n\n# 十一、远程记录日志\n[https://www.betaflare.com/3730.html](https://www.betaflare.com/3730.html)\n\n# 十二、增大session过期时间\n\nvim /etc/config/luci\n\noption sessiontime '36000'\n\n\n# 十三、安装qemu guest agent\n\nopkg install qemu-ga\n\n![](../images/openwrt/pve_openwrt_qemu_ga.png)\n\npve显示openwrt ip：\n\n![](../images/openwrt/pve_openwrt_ip.png)\n\n\n# 十四、修改“半双工”\n\npve虚拟的openwrt网卡实际为全双工，显示为半双工且没有速度，可通过命令修改\n\n临时生效: ethtool -s eth0 speed 1000 duplex full\n\n永久生效: vim /etc/init.d/network\n\n![](../images/openwrt/pve_openwrt_eth_full_duplex.png)\n\n![](../images/openwrt/pve_openwrt_eths_full_duplex.png)\n\n\n# 十五、ddns公网访问\n\n家宽有公网ipv4，映射域名，配上证书，防火墙添加端口转发就可以公网访问。\n\n测试发现80、443端口不通，应该是运营商封了，退而求其次使用非标8443端口。\n\n首先配置域名，我用的cloudflare，在dns添加一条A记录，ip随意比如1.1.1.1：\n\n<img src=\"/../images/openwrt/cloudflare_dns.png\"/>\n\nopenwrt配置ddns：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns.png\" width=\"200\"/>\n\n添加ddns服务：\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf.png\"/>\n\n注意“查询主机名”跟“域名”格式不一样，前一个是“.”，后一个是“@”：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf_detail.png\"/>\n\n回到ddns列表界面，点击“重新加载”就会修改cf域名解析，本机ping一下是否成功。\n\n# 十六、配置域名ssl证书\n\n通常web服务有多个，最好找台linux当网关转发流量，以debian为例，安装nginx、acme.sh颁发证书并自动续期。\n\n获取nginx基础配置：\ncd ~/projects/ && mkdir nginx && mkdir nginx/conf.d && mkdir nginx/conf.d/certs\ndocker run --rm -d --name nginx nginx\ndocker cp nginx:/etc/nginx/nginx.conf ~/projects/nginx/nginx.conf\ndocker stop nginx\n\n启动nginx: \ndocker run -d --restart=always --name nginx -v /home/www/projects/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v /home/www/projects/nginx/conf.d:/etc/nginx/conf.d:ro --network=host nginx\n\n安装acme.sh:\ncurl https://get.acme.sh | sh -s email=yourName@gmail.com\n\nexit退出terminal重新登录使acme.sh命令生效\n\n导出环境变量，acme.sh执行时依赖这些变量：\nexport CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n\n颁发泛域名证书（Issue cert）:\n\n\tacme.sh --issue -d '*.example.com' --dns dns_cf --dnssleep 120 --debug 2 --server letsencrypt\n\n\n安装证书（Install cert）:\n\n\tacme.sh --install-cert -d '*.example.com' --key-file /home/www/projects/nginx/conf.d/certs/*.example.com.privkey.pem --fullchain-file /home/www/projects/nginx/conf.d/certs/*.example.com.fullchain.pem --reloadcmd \"docker exec -it nginx nginx -s reload\" --debug 2\n\n新建配置文件，vim /home/www/projects/nginx/conf.d/openwrt.conf\n```\nserver{\n\tlisten 80;\n\tserver_name op.example.com;\n\n\tclient_max_body_size 200M;\n\t#access_log  /data/logs/nginx_json/access.log json;\n\n\treturn 301 https://$host$request_uri;\n}\n\nserver{\n\tlisten 443 ssl;\n\tserver_name op.example.com;\n\n\tgzip on;\n\tgzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 3;\n    gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n\tclient_max_body_size 200M;\n\t#access_log  /data/logs/nginx_json/access.log json;\n\n\tssl_certificate  /etc/nginx/conf.d/certs/*.example.com.fullchain.pem;\n    ssl_certificate_key /etc/nginx/conf.d/certs/*.example.com.privkey.pem;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n\n    # Prevent crawling\n    if ($http_user_agent ~* \"360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot\"){\n        return 403;\n    }\n\n    location / {\n\t\tproxy_read_timeout 60m;\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Forwarded-Proto https;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Connection \"upgrade\";\n\t\tproxy_redirect off;\n\t\tproxy_pass http://192.168.2.1:80;\n\t}\n\n\terror_page 500 502 503 504 /50x.html;\n\t#location = /50x.html {\n\t#\troot /data/www/error/;\n\t#}\n\n}\n```\n\n查看nginx容器状态: docker ps -a\n\n查看nginx容器日志: docker logs -f --tail 500 nginx\n\n有错的话根据日志排查。\n\n\n# 十七、防火墙 > 端口转发\n\n假设内网debian网关ip为192.168.2.103，则将外网8443/tcp端口转发到debian的443/tcp：\n\n<img src=\"/../images/openwrt/pve_openwrt_forward.png\"/>\n\n\n之后便可以通过 https://openwrt.example.com:8443 访问家里openwrt，其他服务同理：\n\n<img src=\"/../images/openwrt/pve_openwrt_ddns_list.png\"/>\n\n\n\n\n","slug":"openwrt","published":1,"updated":"2022-04-01T08:20:51.491Z","_id":"cl1fsp4ro00008ndn2fn8bxgy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、上传镜像\"><a href=\"#一、上传镜像\" class=\"headerlink\" title=\"一、上传镜像\"></a>一、上传镜像</h1><p>如果是压缩包img.gz格式要先解压成img上传</p>\n<p><img src=\"/../images/openwrt/upload_img.png\"></p>\n<p>pve版本7上传完成会显示文件存放路径: &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso</p>\n<p><img src=\"/../images/openwrt/pve_img.png\"></p>\n<p>pve版本6双击下方操作日志也会显示。</p>\n<h1 id=\"二、创建vm\"><a href=\"#二、创建vm\" class=\"headerlink\" title=\"二、创建vm\"></a>二、创建vm</h1><p>一路下一步，过程省略。</p>\n<p>可以选择不使用ios镜像。</p>\n<p>完成后把默认磁盘删了。</p>\n<h1 id=\"三、生成磁盘\"><a href=\"#三、生成磁盘\" class=\"headerlink\" title=\"三、生成磁盘\"></a>三、生成磁盘</h1><p>ssh登录pve宿主机<br>进入镜像存放目录: cd &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso<br>创建磁盘: qm importdisk 100 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F;openwrt-2022-03-27-x86-64-generic-squashfs-combined.img local-lvm</p>\n<h1 id=\"四、加载磁盘\"><a href=\"#四、加载磁盘\" class=\"headerlink\" title=\"四、加载磁盘\"></a>四、加载磁盘</h1><p>双击未使用磁盘，添加：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk.png\"></p>\n<p>扩容5G：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk_increment.png\"></p>\n<h1 id=\"五、添加网卡\"><a href=\"#五、添加网卡\" class=\"headerlink\" title=\"五、添加网卡\"></a>五、添加网卡</h1><p>如果cpu支持vt-d硬件直通，则在“硬件添加pci”设备</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_pci.png\"></p>\n<p>如果cpu不支持vt-d硬件直通，则只能使用桥接网卡，先到pve节点网络下创建桥接网卡，备注为WAN口：</p>\n<p><img src=\"/../images/openwrt/pve_bridge_eth.png\"></p>\n<p>回到openwrt硬件，添加网络设备，选择WAN：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_bridge_eth.png\"></p>\n<h1 id=\"六、修改配置\"><a href=\"#六、修改配置\" class=\"headerlink\" title=\"六、修改配置\"></a>六、修改配置</h1><p>开机自启（start at boot）改为Yes</p>\n<p>启动顺序（boot order）改成附加的磁盘：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_bootOrder.png\"></p>\n<p>启用qemu guest agent，让pve宿主机能够与vm通讯：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_qemu_guest_agent.png\"></p>\n<h1 id=\"七、启动openwrt\"><a href=\"#七、启动openwrt\" class=\"headerlink\" title=\"七、启动openwrt\"></a>七、启动openwrt</h1><p>在pve web界面进入控制台ssh，按回车看到输入光标</p>\n<p>vim &#x2F;etc&#x2F;config&#x2F;network<br>把lan口静态ip改成192.168.2.1</p>\n<p>重启生效: &#x2F;etc&#x2F;init.d&#x2F;network restart</p>\n<p>浏览器登录openwrt</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_overview.png\"></p>\n<p>用磁盘管理（diskman）把扩容的5G分区格式化成ext4，挂载给&#x2F;opt目录，docker会使用opt作为overlay空间，不会消耗根目录容量。</p>\n<p>ssh登录查看磁盘用量，df -Th：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk_info.png\"></p>\n<h1 id=\"八、cpu跑分\"><a href=\"#八、cpu跑分\" class=\"headerlink\" title=\"八、cpu跑分\"></a>八、cpu跑分</h1><p>ssh执行: cd &#x2F;etc &amp;&amp; .&#x2F;coremark.sh</p>\n<p>有的镜像是&#x2F;sbin&#x2F;cpumark，执行: cpumark</p>\n<h1 id=\"九、网卡测速\"><a href=\"#九、网卡测速\" class=\"headerlink\" title=\"九、网卡测速\"></a>九、网卡测速</h1><p>opkg install iperf3<br>server: iperf3 -s -p 4000<br>client: iperf3 -p 4000 -c 192.168.2.1</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_iperf3.png\"></p>\n<p>因为不是直通，n3160性能偏弱跑不满千兆，7、800也够用。</p>\n<h1 id=\"十、把ash改成bash\"><a href=\"#十、把ash改成bash\" class=\"headerlink\" title=\"十、把ash改成bash\"></a>十、把ash改成bash</h1><p>opkg update &amp;&amp; opkg install bash<br>编辑 &#x2F;etc&#x2F;passwd 文件<br>修改第一行（第一行就是 root 用户）中的 &#x2F;bin&#x2F;ash，改成 &#x2F;bin&#x2F;bash<br>保存重启路由器生效</p>\n<p>查看 &#x2F;etc&#x2F;shells 文件可以看到当前系统中有哪些可用的 shell 解释器<br>&#x2F;bin&#x2F;ash<br>&#x2F;bin&#x2F;bash<br>&#x2F;bin&#x2F;rbash</p>\n<p>安装vim：opkg install vim</p>\n<p>利用bash快速找到历史命令，创建文件：vim ~&#x2F;.inputrc，粘贴：<br>“\\e[A”: history-search-backward<br>“\\e[B”: history-search-forward<br>set show-all-if-ambiguous on<br>set completion-ignore-case on</p>\n<p>设置快捷键，创建文件：vim ~&#x2F;.bashrc，粘贴内容：<br>HISTSIZE&#x3D;-1<br>HISTFILESIZE&#x3D;-1</p>\n<p>alias ll&#x3D;’ls -alhFtr’<br>alias la&#x3D;’ls -A’<br>alias l&#x3D;’ls -CF’</p>\n<p>执行命令生效：source ~&#x2F;.bashrc</p>\n<h1 id=\"十一、远程记录日志\"><a href=\"#十一、远程记录日志\" class=\"headerlink\" title=\"十一、远程记录日志\"></a>十一、远程记录日志</h1><p><a href=\"https://www.betaflare.com/3730.html\">https://www.betaflare.com/3730.html</a></p>\n<h1 id=\"十二、增大session过期时间\"><a href=\"#十二、增大session过期时间\" class=\"headerlink\" title=\"十二、增大session过期时间\"></a>十二、增大session过期时间</h1><p>vim &#x2F;etc&#x2F;config&#x2F;luci</p>\n<p>option sessiontime ‘36000’</p>\n<h1 id=\"十三、安装qemu-guest-agent\"><a href=\"#十三、安装qemu-guest-agent\" class=\"headerlink\" title=\"十三、安装qemu guest agent\"></a>十三、安装qemu guest agent</h1><p>opkg install qemu-ga</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_qemu_ga.png\"></p>\n<p>pve显示openwrt ip：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_ip.png\"></p>\n<h1 id=\"十四、修改“半双工”\"><a href=\"#十四、修改“半双工”\" class=\"headerlink\" title=\"十四、修改“半双工”\"></a>十四、修改“半双工”</h1><p>pve虚拟的openwrt网卡实际为全双工，显示为半双工且没有速度，可通过命令修改</p>\n<p>临时生效: ethtool -s eth0 speed 1000 duplex full</p>\n<p>永久生效: vim &#x2F;etc&#x2F;init.d&#x2F;network</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_eth_full_duplex.png\"></p>\n<p><img src=\"/../images/openwrt/pve_openwrt_eths_full_duplex.png\"></p>\n<h1 id=\"十五、ddns公网访问\"><a href=\"#十五、ddns公网访问\" class=\"headerlink\" title=\"十五、ddns公网访问\"></a>十五、ddns公网访问</h1><p>家宽有公网ipv4，映射域名，配上证书，防火墙添加端口转发就可以公网访问。</p>\n<p>测试发现80、443端口不通，应该是运营商封了，退而求其次使用非标8443端口。</p>\n<p>首先配置域名，我用的cloudflare，在dns添加一条A记录，ip随意比如1.1.1.1：</p>\n<img src=\"/../images/openwrt/cloudflare_dns.png\"/>\n\n<p>openwrt配置ddns：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns.png\" width=\"200\"/>\n\n<p>添加ddns服务：<br><img src=\"/../images/openwrt/pve_openwrt_ddns_cf.png\"/></p>\n<p>注意“查询主机名”跟“域名”格式不一样，前一个是“.”，后一个是“@”：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf_detail.png\"/>\n\n<p>回到ddns列表界面，点击“重新加载”就会修改cf域名解析，本机ping一下是否成功。</p>\n<h1 id=\"十六、配置域名ssl证书\"><a href=\"#十六、配置域名ssl证书\" class=\"headerlink\" title=\"十六、配置域名ssl证书\"></a>十六、配置域名ssl证书</h1><p>通常web服务有多个，最好找台linux当网关转发流量，以debian为例，安装nginx、acme.sh颁发证书并自动续期。</p>\n<p>获取nginx基础配置：<br>cd ~&#x2F;projects&#x2F; &amp;&amp; mkdir nginx &amp;&amp; mkdir nginx&#x2F;conf.d &amp;&amp; mkdir nginx&#x2F;conf.d&#x2F;certs<br>docker run –rm -d –name nginx nginx<br>docker cp nginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf ~&#x2F;projects&#x2F;nginx&#x2F;nginx.conf<br>docker stop nginx</p>\n<p>启动nginx:<br>docker run -d –restart&#x3D;always –name nginx -v &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro -v &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d:ro –network&#x3D;host nginx</p>\n<p>安装acme.sh:<br>curl <a href=\"https://get.acme.sh/\">https://get.acme.sh</a> | sh -s email&#x3D;<a href=\"mailto:&#x79;&#x6f;&#117;&#114;&#x4e;&#97;&#x6d;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#x79;&#x6f;&#117;&#114;&#x4e;&#97;&#x6d;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></p>\n<p>exit退出terminal重新登录使acme.sh命令生效</p>\n<p>导出环境变量，acme.sh执行时依赖这些变量：<br>export CF_Token&#x3D;””<br>export CF_Account_ID&#x3D;””<br>export CF_Zone_ID&#x3D;””</p>\n<p>颁发泛域名证书（Issue cert）:</p>\n<pre><code>acme.sh --issue -d &#39;*.example.com&#39; --dns dns_cf --dnssleep 120 --debug 2 --server letsencrypt\n</code></pre>\n<p>安装证书（Install cert）:</p>\n<pre><code>acme.sh --install-cert -d &#39;*.example.com&#39; --key-file /home/www/projects/nginx/conf.d/certs/*.example.com.privkey.pem --fullchain-file /home/www/projects/nginx/conf.d/certs/*.example.com.fullchain.pem --reloadcmd &quot;docker exec -it nginx nginx -s reload&quot; --debug 2\n</code></pre>\n<p>新建配置文件，vim &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;conf.d&#x2F;openwrt.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name op.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient_max_body_size 200M;</span><br><span class=\"line\">\t#access_log  /data/logs/nginx_json/access.log json;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 301 https://$host$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 443 ssl;</span><br><span class=\"line\">\tserver_name op.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgzip on;</span><br><span class=\"line\">\tgzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 3;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">\tclient_max_body_size 200M;</span><br><span class=\"line\">\t#access_log  /data/logs/nginx_json/access.log json;</span><br><span class=\"line\"></span><br><span class=\"line\">\tssl_certificate  /etc/nginx/conf.d/certs/*.example.com.fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/nginx/conf.d/certs/*.example.com.privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Prevent crawling</span><br><span class=\"line\">    if ($http_user_agent ~* &quot;360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot&quot;)&#123;</span><br><span class=\"line\">        return 403;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t\tproxy_read_timeout 60m;</span><br><span class=\"line\">\t\tproxy_set_header Host $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto https;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">\t\tproxy_redirect off;</span><br><span class=\"line\">\t\tproxy_pass http://192.168.2.1:80;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terror_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">\t#location = /50x.html &#123;</span><br><span class=\"line\">\t#\troot /data/www/error/;</span><br><span class=\"line\">\t#&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx容器状态: docker ps -a</p>\n<p>查看nginx容器日志: docker logs -f –tail 500 nginx</p>\n<p>有错的话根据日志排查。</p>\n<h1 id=\"十七、防火墙-gt-端口转发\"><a href=\"#十七、防火墙-gt-端口转发\" class=\"headerlink\" title=\"十七、防火墙 &gt; 端口转发\"></a>十七、防火墙 &gt; 端口转发</h1><p>假设内网debian网关ip为192.168.2.103，则将外网8443&#x2F;tcp端口转发到debian的443&#x2F;tcp：</p>\n<img src=\"/../images/openwrt/pve_openwrt_forward.png\"/>\n\n\n<p>之后便可以通过 <a href=\"https://openwrt.example.com:8443/\">https://openwrt.example.com:8443</a> 访问家里openwrt，其他服务同理：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns_list.png\"/>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、上传镜像\"><a href=\"#一、上传镜像\" class=\"headerlink\" title=\"一、上传镜像\"></a>一、上传镜像</h1><p>如果是压缩包img.gz格式要先解压成img上传</p>\n<p><img src=\"/../images/openwrt/upload_img.png\"></p>\n<p>pve版本7上传完成会显示文件存放路径: &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso</p>\n<p><img src=\"/../images/openwrt/pve_img.png\"></p>\n<p>pve版本6双击下方操作日志也会显示。</p>\n<h1 id=\"二、创建vm\"><a href=\"#二、创建vm\" class=\"headerlink\" title=\"二、创建vm\"></a>二、创建vm</h1><p>一路下一步，过程省略。</p>\n<p>可以选择不使用ios镜像。</p>\n<p>完成后把默认磁盘删了。</p>\n<h1 id=\"三、生成磁盘\"><a href=\"#三、生成磁盘\" class=\"headerlink\" title=\"三、生成磁盘\"></a>三、生成磁盘</h1><p>ssh登录pve宿主机<br>进入镜像存放目录: cd &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso<br>创建磁盘: qm importdisk 100 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F;openwrt-2022-03-27-x86-64-generic-squashfs-combined.img local-lvm</p>\n<h1 id=\"四、加载磁盘\"><a href=\"#四、加载磁盘\" class=\"headerlink\" title=\"四、加载磁盘\"></a>四、加载磁盘</h1><p>双击未使用磁盘，添加：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk.png\"></p>\n<p>扩容5G：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk_increment.png\"></p>\n<h1 id=\"五、添加网卡\"><a href=\"#五、添加网卡\" class=\"headerlink\" title=\"五、添加网卡\"></a>五、添加网卡</h1><p>如果cpu支持vt-d硬件直通，则在“硬件添加pci”设备</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_pci.png\"></p>\n<p>如果cpu不支持vt-d硬件直通，则只能使用桥接网卡，先到pve节点网络下创建桥接网卡，备注为WAN口：</p>\n<p><img src=\"/../images/openwrt/pve_bridge_eth.png\"></p>\n<p>回到openwrt硬件，添加网络设备，选择WAN：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_bridge_eth.png\"></p>\n<h1 id=\"六、修改配置\"><a href=\"#六、修改配置\" class=\"headerlink\" title=\"六、修改配置\"></a>六、修改配置</h1><p>开机自启（start at boot）改为Yes</p>\n<p>启动顺序（boot order）改成附加的磁盘：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_bootOrder.png\"></p>\n<p>启用qemu guest agent，让pve宿主机能够与vm通讯：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_qemu_guest_agent.png\"></p>\n<h1 id=\"七、启动openwrt\"><a href=\"#七、启动openwrt\" class=\"headerlink\" title=\"七、启动openwrt\"></a>七、启动openwrt</h1><p>在pve web界面进入控制台ssh，按回车看到输入光标</p>\n<p>vim &#x2F;etc&#x2F;config&#x2F;network<br>把lan口静态ip改成192.168.2.1</p>\n<p>重启生效: &#x2F;etc&#x2F;init.d&#x2F;network restart</p>\n<p>浏览器登录openwrt</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_overview.png\"></p>\n<p>用磁盘管理（diskman）把扩容的5G分区格式化成ext4，挂载给&#x2F;opt目录，docker会使用opt作为overlay空间，不会消耗根目录容量。</p>\n<p>ssh登录查看磁盘用量，df -Th：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_disk_info.png\"></p>\n<h1 id=\"八、cpu跑分\"><a href=\"#八、cpu跑分\" class=\"headerlink\" title=\"八、cpu跑分\"></a>八、cpu跑分</h1><p>ssh执行: cd &#x2F;etc &amp;&amp; .&#x2F;coremark.sh</p>\n<p>有的镜像是&#x2F;sbin&#x2F;cpumark，执行: cpumark</p>\n<h1 id=\"九、网卡测速\"><a href=\"#九、网卡测速\" class=\"headerlink\" title=\"九、网卡测速\"></a>九、网卡测速</h1><p>opkg install iperf3<br>server: iperf3 -s -p 4000<br>client: iperf3 -p 4000 -c 192.168.2.1</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_iperf3.png\"></p>\n<p>因为不是直通，n3160性能偏弱跑不满千兆，7、800也够用。</p>\n<h1 id=\"十、把ash改成bash\"><a href=\"#十、把ash改成bash\" class=\"headerlink\" title=\"十、把ash改成bash\"></a>十、把ash改成bash</h1><p>opkg update &amp;&amp; opkg install bash<br>编辑 &#x2F;etc&#x2F;passwd 文件<br>修改第一行（第一行就是 root 用户）中的 &#x2F;bin&#x2F;ash，改成 &#x2F;bin&#x2F;bash<br>保存重启路由器生效</p>\n<p>查看 &#x2F;etc&#x2F;shells 文件可以看到当前系统中有哪些可用的 shell 解释器<br>&#x2F;bin&#x2F;ash<br>&#x2F;bin&#x2F;bash<br>&#x2F;bin&#x2F;rbash</p>\n<p>安装vim：opkg install vim</p>\n<p>利用bash快速找到历史命令，创建文件：vim ~&#x2F;.inputrc，粘贴：<br>“\\e[A”: history-search-backward<br>“\\e[B”: history-search-forward<br>set show-all-if-ambiguous on<br>set completion-ignore-case on</p>\n<p>设置快捷键，创建文件：vim ~&#x2F;.bashrc，粘贴内容：<br>HISTSIZE&#x3D;-1<br>HISTFILESIZE&#x3D;-1</p>\n<p>alias ll&#x3D;’ls -alhFtr’<br>alias la&#x3D;’ls -A’<br>alias l&#x3D;’ls -CF’</p>\n<p>执行命令生效：source ~&#x2F;.bashrc</p>\n<h1 id=\"十一、远程记录日志\"><a href=\"#十一、远程记录日志\" class=\"headerlink\" title=\"十一、远程记录日志\"></a>十一、远程记录日志</h1><p><a href=\"https://www.betaflare.com/3730.html\">https://www.betaflare.com/3730.html</a></p>\n<h1 id=\"十二、增大session过期时间\"><a href=\"#十二、增大session过期时间\" class=\"headerlink\" title=\"十二、增大session过期时间\"></a>十二、增大session过期时间</h1><p>vim &#x2F;etc&#x2F;config&#x2F;luci</p>\n<p>option sessiontime ‘36000’</p>\n<h1 id=\"十三、安装qemu-guest-agent\"><a href=\"#十三、安装qemu-guest-agent\" class=\"headerlink\" title=\"十三、安装qemu guest agent\"></a>十三、安装qemu guest agent</h1><p>opkg install qemu-ga</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_qemu_ga.png\"></p>\n<p>pve显示openwrt ip：</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_ip.png\"></p>\n<h1 id=\"十四、修改“半双工”\"><a href=\"#十四、修改“半双工”\" class=\"headerlink\" title=\"十四、修改“半双工”\"></a>十四、修改“半双工”</h1><p>pve虚拟的openwrt网卡实际为全双工，显示为半双工且没有速度，可通过命令修改</p>\n<p>临时生效: ethtool -s eth0 speed 1000 duplex full</p>\n<p>永久生效: vim &#x2F;etc&#x2F;init.d&#x2F;network</p>\n<p><img src=\"/../images/openwrt/pve_openwrt_eth_full_duplex.png\"></p>\n<p><img src=\"/../images/openwrt/pve_openwrt_eths_full_duplex.png\"></p>\n<h1 id=\"十五、ddns公网访问\"><a href=\"#十五、ddns公网访问\" class=\"headerlink\" title=\"十五、ddns公网访问\"></a>十五、ddns公网访问</h1><p>家宽有公网ipv4，映射域名，配上证书，防火墙添加端口转发就可以公网访问。</p>\n<p>测试发现80、443端口不通，应该是运营商封了，退而求其次使用非标8443端口。</p>\n<p>首先配置域名，我用的cloudflare，在dns添加一条A记录，ip随意比如1.1.1.1：</p>\n<img src=\"/../images/openwrt/cloudflare_dns.png\"/>\n\n<p>openwrt配置ddns：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns.png\" width=\"200\"/>\n\n<p>添加ddns服务：<br><img src=\"/../images/openwrt/pve_openwrt_ddns_cf.png\"/></p>\n<p>注意“查询主机名”跟“域名”格式不一样，前一个是“.”，后一个是“@”：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns_cf_detail.png\"/>\n\n<p>回到ddns列表界面，点击“重新加载”就会修改cf域名解析，本机ping一下是否成功。</p>\n<h1 id=\"十六、配置域名ssl证书\"><a href=\"#十六、配置域名ssl证书\" class=\"headerlink\" title=\"十六、配置域名ssl证书\"></a>十六、配置域名ssl证书</h1><p>通常web服务有多个，最好找台linux当网关转发流量，以debian为例，安装nginx、acme.sh颁发证书并自动续期。</p>\n<p>获取nginx基础配置：<br>cd ~&#x2F;projects&#x2F; &amp;&amp; mkdir nginx &amp;&amp; mkdir nginx&#x2F;conf.d &amp;&amp; mkdir nginx&#x2F;conf.d&#x2F;certs<br>docker run –rm -d –name nginx nginx<br>docker cp nginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf ~&#x2F;projects&#x2F;nginx&#x2F;nginx.conf<br>docker stop nginx</p>\n<p>启动nginx:<br>docker run -d –restart&#x3D;always –name nginx -v &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro -v &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d:ro –network&#x3D;host nginx</p>\n<p>安装acme.sh:<br>curl <a href=\"https://get.acme.sh/\">https://get.acme.sh</a> | sh -s email&#x3D;<a href=\"mailto:&#x79;&#x6f;&#117;&#114;&#x4e;&#97;&#x6d;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#x79;&#x6f;&#117;&#114;&#x4e;&#97;&#x6d;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></p>\n<p>exit退出terminal重新登录使acme.sh命令生效</p>\n<p>导出环境变量，acme.sh执行时依赖这些变量：<br>export CF_Token&#x3D;””<br>export CF_Account_ID&#x3D;””<br>export CF_Zone_ID&#x3D;””</p>\n<p>颁发泛域名证书（Issue cert）:</p>\n<pre><code>acme.sh --issue -d &#39;*.example.com&#39; --dns dns_cf --dnssleep 120 --debug 2 --server letsencrypt\n</code></pre>\n<p>安装证书（Install cert）:</p>\n<pre><code>acme.sh --install-cert -d &#39;*.example.com&#39; --key-file /home/www/projects/nginx/conf.d/certs/*.example.com.privkey.pem --fullchain-file /home/www/projects/nginx/conf.d/certs/*.example.com.fullchain.pem --reloadcmd &quot;docker exec -it nginx nginx -s reload&quot; --debug 2\n</code></pre>\n<p>新建配置文件，vim &#x2F;home&#x2F;www&#x2F;projects&#x2F;nginx&#x2F;conf.d&#x2F;openwrt.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name op.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient_max_body_size 200M;</span><br><span class=\"line\">\t#access_log  /data/logs/nginx_json/access.log json;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 301 https://$host$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 443 ssl;</span><br><span class=\"line\">\tserver_name op.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgzip on;</span><br><span class=\"line\">\tgzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 3;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">\tclient_max_body_size 200M;</span><br><span class=\"line\">\t#access_log  /data/logs/nginx_json/access.log json;</span><br><span class=\"line\"></span><br><span class=\"line\">\tssl_certificate  /etc/nginx/conf.d/certs/*.example.com.fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/nginx/conf.d/certs/*.example.com.privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Prevent crawling</span><br><span class=\"line\">    if ($http_user_agent ~* &quot;360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot&quot;)&#123;</span><br><span class=\"line\">        return 403;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t\tproxy_read_timeout 60m;</span><br><span class=\"line\">\t\tproxy_set_header Host $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto https;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">\t\tproxy_redirect off;</span><br><span class=\"line\">\t\tproxy_pass http://192.168.2.1:80;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terror_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">\t#location = /50x.html &#123;</span><br><span class=\"line\">\t#\troot /data/www/error/;</span><br><span class=\"line\">\t#&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx容器状态: docker ps -a</p>\n<p>查看nginx容器日志: docker logs -f –tail 500 nginx</p>\n<p>有错的话根据日志排查。</p>\n<h1 id=\"十七、防火墙-gt-端口转发\"><a href=\"#十七、防火墙-gt-端口转发\" class=\"headerlink\" title=\"十七、防火墙 &gt; 端口转发\"></a>十七、防火墙 &gt; 端口转发</h1><p>假设内网debian网关ip为192.168.2.103，则将外网8443&#x2F;tcp端口转发到debian的443&#x2F;tcp：</p>\n<img src=\"/../images/openwrt/pve_openwrt_forward.png\"/>\n\n\n<p>之后便可以通过 <a href=\"https://openwrt.example.com:8443/\">https://openwrt.example.com:8443</a> 访问家里openwrt，其他服务同理：</p>\n<img src=\"/../images/openwrt/pve_openwrt_ddns_list.png\"/>\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl0clu9zs000052dn4xqh5il8","tag_id":"cl0clx70k000352dn5ljq0hvh","_id":"cl0clx70l000452dncmvohss2"},{"post_id":"cl0cmzpu400004ddn19b93lbt","tag_id":"cl0cn16ux00014ddnf9hdgjrh","_id":"cl0cn16uy00024ddngupjgkp2"},{"post_id":"cl10dhlbi0003vrdn8xh60g3m","tag_id":"cl10dbf950001vrdngdpy03q0","_id":"cl10dhlbk0004vrdn7iv59fgq"},{"post_id":"cl1elwebe00000rdnb900a70o","tag_id":"cl1fsp4rq00018ndn8ttzc1xi","_id":"cl1fsp4rt00038ndn28nr11j2"},{"post_id":"cl1fsp4ro00008ndn2fn8bxgy","tag_id":"cl1g59tfo0002rzdn5urr6wq0","_id":"cl1g59tfq0003rzdn3c24d9ur"}],"Tag":[{"name":"redmi,ac2100,openwrt","_id":"cl0clu9zv000152dnen9rdvx7"},{"name":"redmi, ac2100, openwrt","_id":"cl0clx70k000352dn5ljq0hvh"},{"name":"non-censor","_id":"cl0cn16ux00014ddnf9hdgjrh"},{"name":"wireguard, openwrt","_id":"cl10dbf950001vrdngdpy03q0"},{"name":"amd4700ge, AIO","_id":"cl1elwebk00010rdn4uzm2g6u"},{"name":"amd4700ge,AIO,all in one,pve","_id":"cl1evo7to0000fbdn5osdbv3n"},{"name":"amd4700ge,AIO,all in one,pve,proxmox","_id":"cl1fsp4rq00018ndn8ttzc1xi"},{"name":"pve,proxmox,openwrt","_id":"cl1fsp4rs00028ndnhhsegrkd"},{"name":"pve,proxmox,openwrt,ddns","_id":"cl1g59pue0000rzdnfyem1iml"},{"name":"pve,proxmox,openwrt,ddns,acme,ssl","_id":"cl1g59tfo0002rzdn5urr6wq0"}]}}